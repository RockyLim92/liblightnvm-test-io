<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<doxygen xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:noNamespaceSchemaLocation="compound.xsd" version="1.7.6.1">
  <compounddef id="liblightnvm_8h" kind="file">
    <compoundname>liblightnvm.h</compoundname>
    <includes local="no">inttypes.h</includes>
    <includes local="no">stdint.h</includes>
    <includes local="no">stdlib.h</includes>
    <includes local="no">sys/types.h</includes>
    <includes local="no">liblightnvm_spec.h</includes>
    <incdepgraph>
      <node id="9">
        <label>stdint.h</label>
      </node>
      <node id="10">
        <label>stdlib.h</label>
      </node>
      <node id="11">
        <label>sys/types.h</label>
      </node>
      <node id="7">
        <label>liblightnvm.h</label>
        <link refid="liblightnvm.h"/>
        <childnode refid="8" relation="include">
        </childnode>
        <childnode refid="9" relation="include">
        </childnode>
        <childnode refid="10" relation="include">
        </childnode>
        <childnode refid="11" relation="include">
        </childnode>
        <childnode refid="12" relation="include">
        </childnode>
      </node>
      <node id="12">
        <label>liblightnvm_spec.h</label>
      </node>
      <node id="8">
        <label>inttypes.h</label>
      </node>
    </incdepgraph>
    <innerclass refid="structnvm__ret" prot="public">nvm_ret</innerclass>
    <innerclass refid="structnvm__cmd" prot="public">nvm_cmd</innerclass>
    <innerclass refid="structnvm__addr" prot="public">nvm_addr</innerclass>
    <innerclass refid="structnvm__geo" prot="public">nvm_geo</innerclass>
    <innerclass refid="structnvm__bbt" prot="public">nvm_bbt</innerclass>
      <sectiondef kind="define">
      <memberdef kind="define" id="liblightnvm_8h_1a650a6e5fc32308ee33c5dc7cdda00a50" prot="public" static="no">
        <name>NVM_NADDR_MAX</name>
        <initializer>64</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="46" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="46" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="liblightnvm_8h_1a2a2886bbf2aa6d9a66d5c92ce65aada4" prot="public" static="no">
        <name>NVM_DEV_NAME_LEN</name>
        <initializer>32</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="48" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="48" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="liblightnvm_8h_1abd2024cd46c9479750006c1c3c6501d8" prot="public" static="no">
        <name>NVM_DEV_PATH_LEN</name>
        <initializer>(<ref refid="liblightnvm_8h_1a2a2886bbf2aa6d9a66d5c92ce65aada4" kindref="member">NVM_DEV_NAME_LEN</ref> + 5)</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="49" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="49" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="liblightnvm_8h_1a6d6840460d05fdd64c91d4eef75662ce" prot="public" static="no">
        <name>NVM_FLAG_SCRBL</name>
        <initializer>0x200</initializer>
        <briefdescription>
<para>Scrambler ON/OFF: Context sensitive. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="51" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="51" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="liblightnvm_8h_1a34141d89e9c936866a7a27624f23d363" prot="public" static="no">
        <name>NVM_BE_ALL</name>
        <initializer>(<ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a43a7d77ee9e3c52bad97140aa722a3e9" kindref="member">NVM_BE_IOCTL</ref> | <ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a702ae1cf2e9c91bf60ebc00c8122db48" kindref="member">NVM_BE_SYSFS</ref> | <ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a67641cd8ad7eda97736036bec9e1a12e" kindref="member">NVM_BE_LBA</ref>)</initializer>
        <briefdescription>
<para>All be idents. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="62" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="62" bodyend="-1"/>
      </memberdef>
      <memberdef kind="define" id="liblightnvm_8h_1a26058ff6296c00234c6e5b6f3ff974df" prot="public" static="no">
        <name>NVM_FLAG_DEFAULT</name>
        <initializer>(<ref refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07adc64703ef96d3a2cb403fb577b4ef1b1" kindref="member">NVM_FLAG_PMODE_SNGL</ref> | <ref refid="liblightnvm_8h_1a6d6840460d05fdd64c91d4eef75662ce" kindref="member">NVM_FLAG_SCRBL</ref>);</initializer>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="72" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="72" bodyend="-1"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="enum">
      <memberdef kind="enum" id="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549" prot="public" static="no">
        <name>nvm_be_id</name>
        <enumvalue id="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549afe44a2c73c6123a73f6524a17ea28803" prot="public">
          <name>NVM_BE_ANY</name>
          <initializer> 0x0</initializer>
          <briefdescription>
<para>Flag for ANY backend. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a43a7d77ee9e3c52bad97140aa722a3e9" prot="public">
          <name>NVM_BE_IOCTL</name>
          <initializer> 0x1</initializer>
          <briefdescription>
<para>Flag for the IOCTL backend. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a702ae1cf2e9c91bf60ebc00c8122db48" prot="public">
          <name>NVM_BE_SYSFS</name>
          <initializer> 0x2</initializer>
          <briefdescription>
<para>Flag for the IOCTL + sysfs backend. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a67641cd8ad7eda97736036bec9e1a12e" prot="public">
          <name>NVM_BE_LBA</name>
          <initializer> 0x4</initializer>
          <briefdescription>
<para>Flag for the IOCTL + sysfs + LBA backend. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of cmd back-ends used by liblightnvm. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="56" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="56" bodyend="61"/>
      </memberdef>
      <memberdef kind="enum" id="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07" prot="public" static="no">
        <name>nvm_pmode</name>
        <enumvalue id="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07adc64703ef96d3a2cb403fb577b4ef1b1" prot="public">
          <name>NVM_FLAG_PMODE_SNGL</name>
          <initializer> 0x0</initializer>
          <briefdescription>
<para>Single-plane. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07a1d02bead038d37a6ebe62a1d3fa6b9aa" prot="public">
          <name>NVM_FLAG_PMODE_DUAL</name>
          <initializer> 0x1</initializer>
          <briefdescription>
<para>Dual-plane (NVM_IO_DUAL_ACCESS) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07ac3d984398a952635422918c3bd3b0632" prot="public">
          <name>NVM_FLAG_PMODE_QUAD</name>
          <initializer> 0x2</initializer>
          <briefdescription>
<para>Quad-plane (NVM_IO_QUAD_ACCESS) </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Plane-mode access for IO. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="67" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="67" bodyend="71"/>
      </memberdef>
      <memberdef kind="enum" id="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bda" prot="public" static="no">
        <name>nvm_quirks</name>
        <enumvalue id="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa1e8018f268c5dd861a5e8278af94e04e" prot="public">
          <name>NVM_QUIRK_PMODE_ERASE_RUNROLL</name>
          <initializer> 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa3b0572c95fb4400dabd4be0cfe0b536f" prot="public">
          <name>NVM_QUIRK_NSID_BY_NAMECONV</name>
          <initializer> 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa35fd71e5deadcd4097e26a74183d38e5" prot="public">
          <name>NVM_QUIRK_OOB_READ_1ST4BYTES_NULL</name>
          <initializer> 0x4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa6c38d92e7b7440301f0ba17fd8eb859f" prot="public">
          <name>NVM_QUIRK_OOB_2LRG</name>
          <initializer> 0x8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Flags for device quirks. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="77" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="77" bodyend="82"/>
      </memberdef>
      <memberdef kind="enum" id="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44" prot="public" static="no">
        <name>nvm_meta_mode</name>
        <enumvalue id="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a9f4379ed325296cacb7a1053a425445d" prot="public">
          <name>NVM_META_MODE_NONE</name>
          <initializer> 0x0</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a184d4b06b1ae37c71eed25cf6da9ec30" prot="public">
          <name>NVM_META_MODE_ALPHA</name>
          <initializer> 0x1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a3dc725757fbac107931e27027b07b2e1" prot="public">
          <name>NVM_META_MODE_CONST</name>
          <initializer> 0x2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of pseudo meta mode. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="110" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="110" bodyend="114"/>
      </memberdef>
      <memberdef kind="enum" id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615" prot="public" static="no">
        <name>nvm_bounds</name>
        <enumvalue id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615ac7f61012b286756f77c5680a6298866a" prot="public">
          <name>NVM_BOUNDS_CHANNEL</name>
          <initializer> 1</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a593219045e5745ee340075dc28edb14f" prot="public">
          <name>NVM_BOUNDS_LUN</name>
          <initializer> 2</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a4f068e6a83b781f283f2610107d7e976" prot="public">
          <name>NVM_BOUNDS_PLANE</name>
          <initializer> 4</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a2ee61e476fc92bc557f5172df6814fbd" prot="public">
          <name>NVM_BOUNDS_BLOCK</name>
          <initializer> 8</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615aeaa2e7617b65376d322ac4158650abfe" prot="public">
          <name>NVM_BOUNDS_PAGE</name>
          <initializer> 16</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615aa7795142a4123686eaab676f9ed0f1a1" prot="public">
          <name>NVM_BOUNDS_SECTOR</name>
          <initializer> 32</initializer>
          <briefdescription>
          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Enumeration of device bounds. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="119" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="119" bodyend="126"/>
      </memberdef>
      <memberdef kind="enum" id="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003" prot="public" static="no">
        <name>nvm_bbt_state</name>
        <enumvalue id="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003ab10831c00bebb2201412105f95dddebd" prot="public">
          <name>NVM_BBT_FREE</name>
          <initializer> 0x0</initializer>
          <briefdescription>
<para>Block is free AKA good. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a0ff1d5d329422e484a6407867197f3c1" prot="public">
          <name>NVM_BBT_BAD</name>
          <initializer> 0x1</initializer>
          <briefdescription>
<para>Block is bad. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a96557572e91470e8dacf68e882eddc4f" prot="public">
          <name>NVM_BBT_GBAD</name>
          <initializer> 0x2</initializer>
          <briefdescription>
<para>Block has grown bad. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a9adafd8e2f694a6192fdce1e03b62951" prot="public">
          <name>NVM_BBT_DMRK</name>
          <initializer> 0x4</initializer>
          <briefdescription>
<para>Block has been marked by device side. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <enumvalue id="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a79b43392d6f18d1e064d59912c6e42c0" prot="public">
          <name>NVM_BBT_HMRK</name>
          <initializer> 0x8</initializer>
          <briefdescription>
<para>Block has been marked by host side. </para>          </briefdescription>
          <detaileddescription>
          </detaileddescription>
        </enumvalue>
        <briefdescription>
<para>Representation of valid values of bad-block-table states. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="358" bodyfile="/home/hkim/liblightnvm/include/liblightnvm.h" bodystart="358" bodyend="364"/>
      </memberdef>
      </sectiondef>
      <sectiondef kind="func">
      <memberdef kind="function" id="liblightnvm_8h_1a6c54464f5d7a8a240c92e30f602cceb5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* nvm_pmode_str</definition>
        <argsstring>(int pmode)</argsstring>
        <name>nvm_pmode_str</name>
        <param>
          <type>int</type>
          <declname>pmode</declname>
        </param>
        <briefdescription>
<para>Obtain string representation of the given plane-mode. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>pmode</parametername>
</parameternamelist>
<parameterdescription>
<para>The plane-mode to obtain string representation of</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, string representation of the given plane-mode. On error, &quot;UNKN&quot;. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="234"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ab3e2e38522bf1d90de637c8a45cb672e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_cmd_user</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_cmd *cmd, struct nvm_ret *ret)</argsstring>
        <name>nvm_cmd_user</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__cmd" kindref="compound">nvm_cmd</ref> *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Execute an user command on the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct to fill with lower-level result-codes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="246"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a130a85e2eacbf799c8aee9081eee72ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_cmd_admin</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_cmd *cmd, struct nvm_ret *ret)</argsstring>
        <name>nvm_cmd_admin</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__cmd" kindref="compound">nvm_cmd</ref> *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Execute an admin command on the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct to fill with lower-level result-codes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="259"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a4046ca3060078da049535435fc90e95b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_cmd_vuser</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_cmd *cmd, struct nvm_ret *ret)</argsstring>
        <name>nvm_cmd_vuser</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__cmd" kindref="compound">nvm_cmd</ref> *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Execute a vector user command on the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct to fill with lower-level result-codes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="272"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a5a2f13a2610219c48912aaeebd2e42ad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_cmd_vadmin</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_cmd *cmd, struct nvm_ret *ret)</argsstring>
        <name>nvm_cmd_vadmin</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__cmd" kindref="compound">nvm_cmd</ref> *</type>
          <declname>cmd</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Execute a vector admin command on the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to execute </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to struct to fill with lower-level result-codes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="285"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a4c5baff25ddba2b37bed6af0a88842fa" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_cmd_pr</definition>
        <argsstring>(struct nvm_cmd *cmd)</argsstring>
        <name>nvm_cmd_pr</name>
        <param>
          <type>struct <ref refid="structnvm__cmd" kindref="compound">nvm_cmd</ref> *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Prints a text-representation of the given command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="292"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1abc6f867ed8611682f745673b2d10e9d9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_cmd_vuser_pr</definition>
        <argsstring>(struct nvm_cmd *cmd)</argsstring>
        <name>nvm_cmd_vuser_pr</name>
        <param>
          <type>struct <ref refid="structnvm__cmd" kindref="compound">nvm_cmd</ref> *</type>
          <declname>cmd</declname>
        </param>
        <briefdescription>
<para>Prints a textual presentation of the vuser par of the given command. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>cmd</parametername>
</parameternamelist>
<parameterdescription>
<para>The command to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="299"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aa4466103089a0ba08e23ea94e429ec13" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_ver_major</definition>
        <argsstring>(void)</argsstring>
        <name>nvm_ver_major</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the &quot;major&quot; version of the library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="387"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ad44a458c7ca1933978b04b5e215fe081" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_ver_minor</definition>
        <argsstring>(void)</argsstring>
        <name>nvm_ver_minor</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the &quot;minor&quot; version of the library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="392"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a67d9bd2088d56cf0d5c5ce8dee858649" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_ver_patch</definition>
        <argsstring>(void)</argsstring>
        <name>nvm_ver_patch</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
        </briefdescription>
        <detaileddescription>
<para><simplesect kind="return"><para>the &quot;patch&quot; version of the library </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="397"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ad11691ce2b6faa5bfb2b2ae261d9b538" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_ver_pr</definition>
        <argsstring>(void)</argsstring>
        <name>nvm_ver_pr</name>
        <param>
          <type>void</type>
        </param>
        <briefdescription>
<para>Prints version information about the library. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="402"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a555f928b395514817d7a990ac4521bad" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_bounds_pr</definition>
        <argsstring>(int mask)</argsstring>
        <name>nvm_bounds_pr</name>
        <param>
          <type>int</type>
          <declname>mask</declname>
        </param>
        <briefdescription>
<para>Prints a humanly readable description of given boundary mask. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="407"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a61f4b316bb5d1b434d2c73ad82e48c10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_lba_pread</definition>
        <argsstring>(struct nvm_dev *dev, void *buf, size_t count, off_t offset)</argsstring>
        <name>nvm_lba_pread</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Read up to `count` bytes from the given `device` starting at the given `offset` into the given buffer starting at `buf`. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is equivalent to `pread`/`pwrite` except it takes the opaque `struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *` instead of a file descriptor </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="418"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ac594de405f8d471266acf536417250ce" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_lba_pwrite</definition>
        <argsstring>(struct nvm_dev *dev, const void *buf, size_t count, off_t offset)</argsstring>
        <name>nvm_lba_pwrite</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>off_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Write up to `count` bytes from the buffer starting at `buf` to the given device `dev` at given `offset`. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>This is equivalent to `pread`/`pwrite` except it takes the opaque `struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *` instead of a file descriptor </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="429"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a6e2c1c4c000426c56906dee5d06a619f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_ret_pr</definition>
        <argsstring>(const struct nvm_ret *ret)</argsstring>
        <name>nvm_ret_pr</name>
        <param>
          <type>const struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Prints a humanly readable representation the given `struct nvm_ret`. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the `struct nvm_ret` to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="436"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aca47f5add1d8e1c8951a361a5d31f7d0" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__bbt" kindref="compound">nvm_bbt</ref> *</type>
        <definition>struct nvm_bbt* nvm_bbt_get</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addr, struct nvm_ret *ret)</argsstring>
        <name>nvm_bbt_get</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Retrieves a bad block table from device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the LUN to retrieve bad-block-table for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, a pointer to the bad-block-table is returned. On error, NULL is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="450"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a6931a3845f299650c4de5a152a2c875d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_bbt_set</definition>
        <argsstring>(struct nvm_dev *dev, const struct nvm_bbt *bbt, struct nvm_ret *ret)</argsstring>
        <name>nvm_bbt_set</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnvm__bbt" kindref="compound">nvm_bbt</ref> *</type>
          <declname>bbt</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Updates the bad-block-table on given device using the provided bbt. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbt</parametername>
</parameternamelist>
<parameterdescription>
<para>The bbt to write to device </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="463"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a2dbbb2e922bdca909354da7f2ecba9a3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_bbt_mark</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addrs[], int naddrs, uint16_t flags, struct nvm_ret *ret)</argsstring>
        <name>nvm_bbt_mark</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addrs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Mark addresses good, bad, or host-bad. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The addresses given to this function are interpreted as block addresses, in contrast to `nvm_addr_write`, and `nvm_addr_read` which interpret addresses and sector addresses.</para></simplesect>
<simplesect kind="see"><para>`enum nvm_bbt_state`</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of memory address array </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>0x0 = GOOD, 0x1 = BAD, 0x2 = GROWN_BAD, as well as access mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="485"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a8b9b1792eefc95cd2933799e6057b0b2" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_bbt_flush</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addr, struct nvm_ret *ret)</argsstring>
        <name>nvm_bbt_flush</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Persist the bad-block-table at `addr` on device and deallocate managed memory for the given bad-block-table describing the LUN at `addr`. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>Address of the LUN to flush bad-block-table for </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="499"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a11f997960939bcad35c78c497702d0c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_bbt_flush_all</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_ret *ret)</argsstring>
        <name>nvm_bbt_flush_all</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Persist all bad-block-tables associated with the given `dev`. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned, `errno` set to indicate the error and ret filled with lower-level result codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="510"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a341957842cd30286e6933aefc93884b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__bbt" kindref="compound">nvm_bbt</ref> *</type>
        <definition>struct nvm_bbt* nvm_bbt_alloc_cp</definition>
        <argsstring>(const struct nvm_bbt *bbt)</argsstring>
        <name>nvm_bbt_alloc_cp</name>
        <param>
          <type>const struct <ref refid="structnvm__bbt" kindref="compound">nvm_bbt</ref> *</type>
          <declname>bbt</declname>
        </param>
        <briefdescription>
<para>Allocate a copy of the given bad-block-table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bbt</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the bad-block-table to copy </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, a pointer to a write-able copy of the given bbt is returned. On error, NULL is returned and errno set to indicate the error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="519"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aeeef11a1285a6fa2695a3367afdb3770" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_bbt_free</definition>
        <argsstring>(struct nvm_bbt *bbt)</argsstring>
        <name>nvm_bbt_free</name>
        <param>
          <type>struct <ref refid="structnvm__bbt" kindref="compound">nvm_bbt</ref> *</type>
          <declname>bbt</declname>
        </param>
        <briefdescription>
<para>Destroys a given bad-block-table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bbt</parametername>
</parameternamelist>
<parameterdescription>
<para>The bad-block-table to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="526"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ac5f107f6aba4ae9aa97b154938f02dd1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_bbt_pr</definition>
        <argsstring>(const struct nvm_bbt *bbt)</argsstring>
        <name>nvm_bbt_pr</name>
        <param>
          <type>const struct <ref refid="structnvm__bbt" kindref="compound">nvm_bbt</ref> *</type>
          <declname>bbt</declname>
        </param>
        <briefdescription>
<para>Prints a humanly readable representation of the given bad-block-table. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>bbt</parametername>
</parameternamelist>
<parameterdescription>
<para>The bad-block-table to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="533"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a0d57cde71f4ee77503a443daca3b3261" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_bbt_state_pr</definition>
        <argsstring>(int state)</argsstring>
        <name>nvm_bbt_state_pr</name>
        <param>
          <type>int</type>
          <declname>state</declname>
        </param>
        <briefdescription>
<para>Prints a humanly readable representation of the given bad-block-table state. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="538"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ae1e030c59680f889363fc51a6875dea4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_geo_pr</definition>
        <argsstring>(const struct nvm_geo *geo)</argsstring>
        <name>nvm_geo_pr</name>
        <param>
          <type>const struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> *</type>
          <declname>geo</declname>
        </param>
        <briefdescription>
<para>Prints human readable representation of the given geometry. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="543"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1adce9240457c84bf95e34ed9bb3cdf05e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
        <definition>struct nvm_dev* nvm_dev_open</definition>
        <argsstring>(const char *dev_path)</argsstring>
        <name>nvm_dev_open</name>
        <param>
          <type>const char *</type>
          <declname>dev_path</declname>
        </param>
        <briefdescription>
<para>Creates a handle to given device path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the device to open e.g. &quot;/dev/nvme0n1&quot;</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="552"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a1f04d3d65d91d54bb2bf9d8100196f88" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
        <definition>struct nvm_dev* nvm_dev_openf</definition>
        <argsstring>(const char *dev_path, int flags)</argsstring>
        <name>nvm_dev_openf</name>
        <param>
          <type>const char *</type>
          <declname>dev_path</declname>
        </param>
        <param>
          <type>int</type>
          <declname>flags</declname>
        </param>
        <briefdescription>
<para>Creates a handle to given device path. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev_path</parametername>
</parameternamelist>
<parameterdescription>
<para>Path of the device to open e.g. &quot;/dev/nvme0n1&quot; </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Flags for opening device in different modes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A handle to the device </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="562"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a89508f4d3ba8a4ab8d7152e175702ad9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_dev_close</definition>
        <argsstring>(struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_close</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Destroys device-handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="569"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a3cc4daae722afb47925fa830fb9b3bcc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_dev_attr_pr</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_attr_pr</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Prints misc. </para>        </briefdescription>
        <detaileddescription>
<para>device attribute associated with the given handle</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="576"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1afb6bfa7f3512c27a4ab7b327a3a718d1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_dev_pr</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_pr</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Prints all information about the device associated with the given handle. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="583"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a89944f459fdad2b63528b4cc7003c0dc" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_fd</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_fd</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the file-descriptor associated with the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, file descriptor is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="591"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1af414fb32da3f2ef07b2c09f7109e30ec" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* nvm_dev_get_name</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_name</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the name associated with the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, string is returned. On error, NULL is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="599"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a949c7cee0c3e437c36306a3d04d01ad8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>const char *</type>
        <definition>const char* nvm_dev_get_path</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_path</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the path associated with the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, string is returned. On error, NULL is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="607"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a397af18d57c152681dd8d33c2e117113" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_nsid</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_nsid</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the NVME namespace identifier of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open`</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, NVME namespace identifier is returned. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="616"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ac29ac06b23e63760bd5ec7a425277791" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_verid</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_verid</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the verid of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, verid is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="624"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a7afc9f3aa3eb8feac8977d2689527be8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint32_t</type>
        <definition>uint32_t nvm_dev_get_mccap</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_mccap</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the media-controller capabilities mask of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, capabilities mask is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="632"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1afc453a85d2883240dcda1e3d9f7ec3e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_pmode</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_pmode</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the default plane_mode of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, pmode flag is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="640"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a3805b60fb03909a44a4668a12eb7800b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_pmode</definition>
        <argsstring>(struct nvm_dev *dev, int pmode)</argsstring>
        <name>nvm_dev_set_pmode</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>pmode</declname>
        </param>
        <briefdescription>
<para>Set the default plane-mode for the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pmode</parametername>
</parameternamelist>
<parameterdescription>
<para>Default plane-mode</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="650"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1af043aab951556042e8e36f6b15bc23e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_quirks</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_quirks</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the mask of quirks for the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, quirk mask is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="658"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a870e57f2b29bde5434f470c01b3b7506" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_quirks</definition>
        <argsstring>(struct nvm_dev *dev, int quirks)</argsstring>
        <name>nvm_dev_set_quirks</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>quirks</declname>
        </param>
        <briefdescription>
<para>Set the default plane-mode for the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>quirks</parametername>
</parameternamelist>
<parameterdescription>
<para>Mask of `enum nvm_quirks`</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="668"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aad0ab0099982dcf1904a432332c8806a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct nvm_spec_ppaf_nand *</type>
        <definition>struct nvm_spec_ppaf_nand* nvm_dev_get_ppaf</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_ppaf</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the ppa-format of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, ppa-format is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="677"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aea644d1957d556428468a16a3ed4ceef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct nvm_spec_ppaf_nand_mask *</type>
        <definition>struct nvm_spec_ppaf_nand_mask* nvm_dev_get_ppaf_mask</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_ppaf_mask</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the ppa-format mask of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, ppa-format mask is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="686"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a2f4483e4a3e5b125d13ccb290d311c97" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_meta_mode</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_meta_mode</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the &apos;meta-mode&apos; of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, meta-mode is returned </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="694"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a718098e61ba492a1750321480a5fe382" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_meta_mode</definition>
        <argsstring>(struct nvm_dev *dev, int meta_mode)</argsstring>
        <name>nvm_dev_set_meta_mode</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>meta_mode</declname>
        </param>
        <briefdescription>
<para>Set the default &apos;meta-mode&apos; of the given device. </para>        </briefdescription>
        <detaileddescription>
<para>The meta-mode is a setting used by the <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> interface to write pseudo-meta data to the out-of-bound area.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta_mode</parametername>
</parameternamelist>
<parameterdescription>
<para>One of: NVM_META_MODE_[NONE|ALPHA|CONST]</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="708"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1abec2b2d31324f9a8856ee2d49314302f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_erase_naddrs_max</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_erase_naddrs_max</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the maximum number of addresses to use when sending erases to device. </para>        </briefdescription>
        <detaileddescription>
<para>That is, when invoking nvm_addr_erase.</para><para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="716"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ad4fb4c3c3a8c0f05e70888a6a1e7a978" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_bbts_cached</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_bbts_cached</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns whether caching is enabled for bad-block-tables on the device. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>0 = cache disabled 1 = cache enabled</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="727"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a1d67daea17bcd7f89de49a5e4de728f3" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_be_id</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_be_id</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the backend identifier associated with the given device. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="734"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a0373ef8edc1578351e999f7df8737b04" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_read_naddrs_max</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_read_naddrs_max</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of addresses to use for reads, that is, when invoking nvm_addr_read. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="742"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1af612020fdd37f3bfb6909dbd80adbace" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_get_write_naddrs_max</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_write_naddrs_max</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of addresses to use for writes, that is, when invoking nvm_addr_write. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="750"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a4dfe338fa9e6102111ab8b7fe66b015b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_erase_naddrs_max</definition>
        <argsstring>(struct nvm_dev *dev, int naddrs)</argsstring>
        <name>nvm_dev_set_erase_naddrs_max</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of addresses to use for erases, that is, when invoking nvm_addr_erase. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="761"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a1918f6acec6f8308d69137bfb8c9d5e1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_bbts_cached</definition>
        <argsstring>(struct nvm_dev *dev, int bbts_cached)</argsstring>
        <name>nvm_dev_set_bbts_cached</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>bbts_cached</declname>
        </param>
        <briefdescription>
<para>Sets whether retrieval and changes to bad-block-tables should be cached. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>bbts_cached</parametername>
</parameternamelist>
<parameterdescription>
<para>1 = cache enabled, 0 = cache disabled</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="771"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a141efa65b01c364eb1d80a75e86fecae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_read_naddrs_max</definition>
        <argsstring>(struct nvm_dev *dev, int naddrs)</argsstring>
        <name>nvm_dev_set_read_naddrs_max</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of addresses to use for erases, that is, when invoking nvm_addr_erase. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="782"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aa4c23ba6d3fd304822c0b110d2a16d68" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_dev_set_write_naddrs_max</definition>
        <argsstring>(struct nvm_dev *dev, int naddrs)</argsstring>
        <name>nvm_dev_set_write_naddrs_max</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <briefdescription>
<para>Set the maximum number of addresses to use for erases, that is, when invoking nvm_addr_erase. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>The maximum</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="793"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ae77d2103b19bcc9f0b738e3f6526983b" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> *</type>
        <definition>struct nvm_geo* nvm_dev_get_geo</definition>
        <argsstring>(const struct nvm_dev *dev)</argsstring>
        <name>nvm_dev_get_geo</name>
        <param>
          <type>const struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <briefdescription>
<para>Returns the geometry of the given device. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>See struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> for the specifics of the returned geometry</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open`</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>The geometry (struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref>) of given device handle </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="805"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1afc8ae47b17cfb871ea0abd60de7f521a" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* nvm_buf_alloc</definition>
        <argsstring>(const struct nvm_geo *geo, size_t nbytes)</argsstring>
        <name>nvm_buf_alloc</name>
        <param>
          <type>const struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> *</type>
          <declname>geo</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Allocate a buffer aligned to match the given geometry. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>nbytes must be greater than zero and a multiple of minimal granularity </para><simplesectsep/><para>Free the buffer using nvm_buf_free</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>geo</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometry to get alignment information from </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the allocated buffer in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the allocated memory. On error: NULL is returned and `errno` set appropriatly </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="821"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a59e9463e24fc966eb59e670bb6c9fb8d" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void *</type>
        <definition>void* nvm_buf_alloca</definition>
        <argsstring>(size_t alignment, size_t nbytes)</argsstring>
        <name>nvm_buf_alloca</name>
        <param>
          <type>size_t</type>
          <declname>alignment</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Allocate a buffer of the given size with the given alignment. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Free the buffer using nvm_buf_free</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>alignment</parametername>
</parameternamelist>
<parameterdescription>
<para>The alignment in bytes </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>The size of the buffer in bytes</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A pointer to the allocated memory. On error: NULL is returned and `errno` set appropriatly </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="835"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a16df329c7ba7ab06558e99ba50b28ec9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_buf_fill</definition>
        <argsstring>(char *buf, size_t nbytes)</argsstring>
        <name>nvm_buf_fill</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Fills `buf` with chars A-Z. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to fill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of bytes to fill in buf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="843"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ac100663d6564f62419d8bcb2cb2d7f6f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_buf_free</definition>
        <argsstring>(void *buf)</argsstring>
        <name>nvm_buf_free</name>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <briefdescription>
<para>Free the given buffer, calling regular &quot;free&quot; on the buffer might fail. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to fill </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of bytes to fill in buf </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="851"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ab2d8c2634a332e3ca32055b17ef7b83e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_buf_pr</definition>
        <argsstring>(char *buf, size_t nbytes)</argsstring>
        <name>nvm_buf_pr</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <briefdescription>
<para>Prints `buf` to stdout. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer to print </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Amount of bytes of buf to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="859"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a82f4d705bf4c2b65b78fea2110db57f4" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_buf_to_file</definition>
        <argsstring>(char *buf, size_t nbytes, const char *path)</argsstring>
        <name>nvm_buf_to_file</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Write content of buffer into file. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Destination where buffer will be dumped to</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="870"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ab10d2fe97a51f6c5189438ded36a4697" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_buf_from_file</definition>
        <argsstring>(char *buf, size_t nbytes, const char *path)</argsstring>
        <name>nvm_buf_from_file</name>
        <param>
          <type>char *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>nbytes</declname>
        </param>
        <param>
          <type>const char *</type>
          <declname>path</declname>
        </param>
        <briefdescription>
<para>Read content of file into buffer. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to the buffer </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>nbytes</parametername>
</parameternamelist>
<parameterdescription>
<para>Size of buf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>path</parametername>
</parameternamelist>
<parameterdescription>
<para>Source to read from</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success, -1 on error and errno set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="881"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a1b77997985a372c961d79d09340b4108" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_addr_erase</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addrs[], int naddrs, uint16_t flags, struct nvm_ret *ret)</argsstring>
        <name>nvm_addr_erase</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addrs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Erase nvm at given addresses. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The addresses given to this function are interpreted as block addresses, in contrast to `nvm_addr_mark`, `nvm_addr_write`, and `nvm_addr_read` for which the address is interpreted as a sector address.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of array of memory addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success. On error: returns -1, sets `errno` accordingly, and fills `ret` with lower-level result and status codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="901"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a3e1e58dc35ba7482dfafc7bec0464d94" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_addr_write</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addrs[], int naddrs, const void *buf, const void *meta, uint16_t flags, struct nvm_ret *ret)</argsstring>
        <name>nvm_addr_write</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addrs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>meta</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Write content of buf to nvm at address(es) </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The addresses given to this function are interpreted as sector addresses, in contrast to nvm_addr_mark and nvm_addr_erase for which the address is interpreted as a block address.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Array of memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of array of memory addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>The buffer which content to write, must be aligned to device geometry of minimal write granularity and size equal to `naddrs * geo.nbytes` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer containing metadata, must be of size equal to device `naddrs * geo.meta_nbytes` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success. On error: returns -1, sets `errno` accordingly, and fills `ret` with lower-level result and status codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="927"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a6a7ea06fc56c5492a758542849c366ef" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_addr_read</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addrs[], int naddrs, void *buf, void *meta, uint16_t flags, struct nvm_ret *ret)</argsstring>
        <name>nvm_addr_read</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addrs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>meta</declname>
        </param>
        <param>
          <type>uint16_t</type>
          <declname>flags</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__ret" kindref="compound">nvm_ret</ref> *</type>
          <declname>ret</declname>
        </param>
        <briefdescription>
<para>Read content of nvm at addresses into buf. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>The addresses given to this function are interpreted as sector addresses, in contrast to `nvm_addr_mark` and `nvm_addr_erase` for which the address is interpreted as a block address.</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>List of memory address </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Length of array of memory addresses </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store result of read into, must be aligned to device granularity min read and size equal to `naddrs * geo.sector_nbytes` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>meta</parametername>
</parameternamelist>
<parameterdescription>
<para>Buffer to store content of metadata, must be of size equal to device `naddrs * geo.meta_nbytes` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>flags</parametername>
</parameternamelist>
<parameterdescription>
<para>Access mode </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ret</parametername>
</parameternamelist>
<parameterdescription>
<para>Pointer to structure in which to store lower-level status and result. </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>0 on success. On error: returns -1, sets `errno` accordingly, and fills `ret` with lower-level result and status codes </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="953"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a159547b8ca24e872b999877407bffda9" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_addr_check</definition>
        <argsstring>(struct nvm_addr addr, const struct nvm_geo *geo)</argsstring>
        <name>nvm_addr_check</name>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <param>
          <type>const struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> *</type>
          <declname>geo</declname>
        </param>
        <briefdescription>
<para>Checks whether the given address exceeds bounds of the given geometry. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The addr to check </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>geo</parametername>
</parameternamelist>
<parameterdescription>
<para>The geometric bounds to check the given address against </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>A mask of exceeded boundaries </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="962"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1add18460eeec07ae8ce6b9f471ca83a9e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t nvm_addr_gen2dev</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addr)</argsstring>
        <name>nvm_addr_gen2dev</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Converts a given physical address generic-format to device-format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical address on generic-format to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Physical address on device-format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="971"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a7dd099dc686dac92081bd7c4c37a5895" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
        <definition>struct nvm_addr nvm_addr_dev2gen</definition>
        <argsstring>(struct nvm_dev *dev, uint64_t addr)</argsstring>
        <name>nvm_addr_dev2gen</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Converts a given physical address on device-format to generic-format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical address on device-format to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Physical address on generic-format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="980"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1adbc37c88b542086d0eb6d199c662c112" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t nvm_addr_dev2lba</definition>
        <argsstring>(struct nvm_dev *dev, uint64_t addr)</argsstring>
        <name>nvm_addr_dev2lba</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Converts a given physical address on device-format to lba-format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical address on device-format to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Physical address on lba-format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="989"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a72f0d9b320d381ec8032a7b7ccf887b6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t nvm_addr_dev2off</definition>
        <argsstring>(struct nvm_dev *dev, uint64_t addr)</argsstring>
        <name>nvm_addr_dev2off</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Converts a given physical address on device-format to lba-offset-format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical address on device-format to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Physical address on lba-offset-format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="998"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a480ec1815404e58f793ea59794fa912f" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t nvm_addr_gen2off</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addr)</argsstring>
        <name>nvm_addr_gen2off</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Converts a given physical address on generic-format to byte offset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical address on generic-format to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Logical address as byte offset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1007"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aee7bdce116af860a64aaea40c99152eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
        <definition>struct nvm_addr nvm_addr_off2gen</definition>
        <argsstring>(struct nvm_dev *dev, uint64_t off)</argsstring>
        <name>nvm_addr_off2gen</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>off</declname>
        </param>
        <briefdescription>
<para>Converts a given byte offset to physical address on generic-format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical address as byte offset to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Physical address on generic-format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1016"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1af7269ce2b8cd9d32b033e79f8439f2e5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>uint64_t</type>
        <definition>uint64_t nvm_addr_gen2lba</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addr)</argsstring>
        <name>nvm_addr_gen2lba</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Converts a given physical address on generic-format to LBA offset. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The physical address on generic-format to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Logical address as LBA offset </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1025"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a9cb32c309e0d6b7c23a455fa97d303be" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
        <definition>struct nvm_addr nvm_addr_lba2gen</definition>
        <argsstring>(struct nvm_dev *dev, uint64_t off)</argsstring>
        <name>nvm_addr_lba2gen</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>uint64_t</type>
          <declname>off</declname>
        </param>
        <briefdescription>
<para>Converts a given LBA offset to physical address on generic-format. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>off</parametername>
</parameternamelist>
<parameterdescription>
<para>Logical address as LBA offset to convert </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>Physical address on generic-format </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1034"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a7be914f85027e87b98d1d80148874ff7" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_addr_pr</definition>
        <argsstring>(struct nvm_addr addr)</argsstring>
        <name>nvm_addr_pr</name>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addr</declname>
        </param>
        <briefdescription>
<para>Prints a humanly readable representation of the given address. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>addr</parametername>
</parameternamelist>
<parameterdescription>
<para>The address to print </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1041"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a68d50a6ea5c4d5e6c65ba27e674bffca" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_addr_prn</definition>
        <argsstring>(struct nvm_addr *addr, unsigned int naddrs)</argsstring>
        <name>nvm_addr_prn</name>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref> *</type>
          <declname>addr</declname>
        </param>
        <param>
          <type>unsigned int</type>
          <declname>naddrs</declname>
        </param>
        <briefdescription>
<para>Prints a humanly readable representation of the given list of addresses. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1046"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aa63a092d2f015a4645dab88c70ec6f10" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
        <definition>struct nvm_vblk* nvm_vblk_alloc</definition>
        <argsstring>(struct nvm_dev *dev, struct nvm_addr addrs[], int naddrs)</argsstring>
        <name>nvm_vblk_alloc</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref></type>
          <declname>addrs</declname>
          <array>[]</array>
        </param>
        <param>
          <type>int</type>
          <declname>naddrs</declname>
        </param>
        <briefdescription>
<para>Allocate a virtual block, spanning a given set of physical blocks. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>addrs</parametername>
</parameternamelist>
<parameterdescription>
<para>Set of block-addresses forming the virtual block </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>naddrs</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of addresses in the address-set</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, an opaque pointer to the initialized virtual block is returned. On error, NULL and `errno` set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1059"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a2fe8c7aced82ea70540457c9ee725d69" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
        <definition>struct nvm_vblk* nvm_vblk_alloc_line</definition>
        <argsstring>(struct nvm_dev *dev, int ch_bgn, int ch_end, int lun_bgn, int lun_end, int blk)</argsstring>
        <name>nvm_vblk_alloc_line</name>
        <param>
          <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
          <declname>dev</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch_bgn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>ch_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lun_bgn</declname>
        </param>
        <param>
          <type>int</type>
          <declname>lun_end</declname>
        </param>
        <param>
          <type>int</type>
          <declname>blk</declname>
        </param>
        <briefdescription>
<para>Allocate a virtual block (spanning planes, channels, and LUNs) </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>dev</parametername>
</parameternamelist>
<parameterdescription>
<para>Device handle obtained with `nvm_dev_open` </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_bgn</parametername>
</parameternamelist>
<parameterdescription>
<para>Beginning of the channel span, as inclusive index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>ch_end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of the channel span, as inclusive index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lun_bgn</parametername>
</parameternamelist>
<parameterdescription>
<para>Beginning of the LUN span, as inclusive index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>lun_end</parametername>
</parameternamelist>
<parameterdescription>
<para>End of the LUN span, as inclusive index </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>blk</parametername>
</parameternamelist>
<parameterdescription>
<para>Block index</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, an opaque pointer to the initialized virtual block is returned. On error, NULL and `errno` set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1076"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ac3376a44e79e1fc321edfc483f17e9b5" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_vblk_free</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_free</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Destroy a virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The virtual block to destroy </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1083"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1ad61923687309e99e0999344fcdab71c8" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_vblk_erase</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_erase</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Erase a virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Erasing a vblk will reset internal position pointers</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The virtual block to erase </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of bytes erased is returned. On error, -1 is returned and `errno` set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1095"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a85d3d7291444aec42241baa5ced95a39" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_vblk_write</definition>
        <argsstring>(struct nvm_vblk *vblk, const void *buf, size_t count)</argsstring>
        <name>nvm_vblk_write</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Write to a virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>buf must be aligned to device geometry, see struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> and nvm_buf_alloc count must be a multiple of min-size, see struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> do not mix use of nvm_vblk_pwrite with nvm_vblk_write on the same virtual block</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The virtual block to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Write content starting at buf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to write </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of bytes written is returned and vblk internal position is updated. On error, -1 is returned and `errno` set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1113"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a97d743b3a7a4c3db4b359c74dbf8237c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_vblk_pwrite</definition>
        <argsstring>(struct nvm_vblk *vblk, const void *buf, size_t count, size_t offset)</argsstring>
        <name>nvm_vblk_pwrite</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <param>
          <type>const void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Write to a virtual block at a given offset. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>buf must be aligned to device geometry, see struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> and nvm_buf_alloc count must be a multiple of min-size, see struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> offset must be a multiple of min-size, see struct <ref refid="structnvm__geo" kindref="compound">nvm_geo</ref> do not mix use of nvm_vblk_pwrite with nvm_vblk_write on the same virtual block</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The virtual block to write to </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>buf</parametername>
</parameternamelist>
<parameterdescription>
<para>Write content starting at buf </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>count</parametername>
</parameternamelist>
<parameterdescription>
<para>The number of bytes to write </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>offset</parametername>
</parameternamelist>
<parameterdescription>
<para>Start writing offset bytes within virtual block </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of bytes written is returned. On error, -1 is returned and `errno` set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1133"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1afb47188711a2ec1dd1fa7b2754b4a57c" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_vblk_pad</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_pad</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Pad the virtual block with synthetic data. </para>        </briefdescription>
        <detaileddescription>
<para><simplesect kind="note"><para>Assumes that you have used nvm_vblk_write and now want to fill the remaining virtual block in order to meet block write-before-read constraints</para></simplesect>
<parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The virtual block to pad </para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, the number of bytes padded is returned and internal position is updated. On error, -1 is returned and `errno` set to indicate the error. </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1147"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a7c6feddfd061158168de5ca63ac44275" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_vblk_read</definition>
        <argsstring>(struct nvm_vblk *vblk, void *buf, size_t count)</argsstring>
        <name>nvm_vblk_read</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <briefdescription>
<para>Read from a virtual block. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1152"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a57c35c8050d0593ff26053958b5a8adf" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>ssize_t</type>
        <definition>ssize_t nvm_vblk_pread</definition>
        <argsstring>(struct nvm_vblk *vblk, void *buf, size_t count, size_t offset)</argsstring>
        <name>nvm_vblk_pread</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <param>
          <type>void *</type>
          <declname>buf</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>count</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>offset</declname>
        </param>
        <briefdescription>
<para>Read from a virtual block at given offset. </para>        </briefdescription>
        <detaileddescription>
        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1158"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1aac922386d32a0a3b8c2f995babb3fbb6" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__dev" kindref="compound">nvm_dev</ref> *</type>
        <definition>struct nvm_dev* nvm_vblk_get_dev</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_get_dev</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Retrieve the device associated with the given virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to retrieve information from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1165"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a2c95349b0051549491330735c67aa3eb" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>struct <ref refid="structnvm__addr" kindref="compound">nvm_addr</ref> *</type>
        <definition>struct nvm_addr* nvm_vblk_get_addrs</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_get_addrs</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Retrieve the set of addresses defining the virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to retrieve information from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1172"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a69ae36e185cc948d3934f565dd98a5ac" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_vblk_get_naddrs</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_get_naddrs</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Retrieve the number of addresses in the address set of the virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to retrieve information from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1179"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a664c068485c41bca75058937cb29252e" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nvm_vblk_get_nbytes</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_get_nbytes</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Retrieve the size, in bytes, of a given virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to retrieve information from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1186"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a6dcb07267d60e69380b3cb688e119379" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nvm_vblk_get_pos_read</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_get_pos_read</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Retrieve the read cursor position for the given virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to retrieve information from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1193"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1abc6d07b42f6115393c2764c1fb4a97a1" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>size_t</type>
        <definition>size_t nvm_vblk_get_pos_write</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_get_pos_write</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Retrieve the write cursor position for the given virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to retrieve information from </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1200"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a3da89ae4e65a37e9186d26a5cd5ce7ff" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_vblk_set_pos_read</definition>
        <argsstring>(struct nvm_vblk *vblk, size_t pos)</argsstring>
        <name>nvm_vblk_set_pos_read</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Set the read cursor position for the given virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The vblk to change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The new read cursor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned and `errno` set to indicate the error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1211"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1a21d24d5190b579ef1fa6c368aa23b470" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>int</type>
        <definition>int nvm_vblk_set_pos_write</definition>
        <argsstring>(struct nvm_vblk *vblk, size_t pos)</argsstring>
        <name>nvm_vblk_set_pos_write</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <param>
          <type>size_t</type>
          <declname>pos</declname>
        </param>
        <briefdescription>
<para>Set the write cursor position for the given virtual block. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The vblk to change </para></parameterdescription>
</parameteritem>
<parameteritem>
<parameternamelist>
<parametername>pos</parametername>
</parameternamelist>
<parameterdescription>
<para>The new write cursor</para></parameterdescription>
</parameteritem>
</parameterlist>
<simplesect kind="return"><para>On success, 0 is returned. On error, -1 is returned and `errno` set to indicate the error </para></simplesect>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1222"/>
      </memberdef>
      <memberdef kind="function" id="liblightnvm_8h_1af7a10ed9f4afdf308e43901a3cf3c1ae" prot="public" static="no" const="no" explicit="no" inline="no" virt="non-virtual">
        <type>void</type>
        <definition>void nvm_vblk_pr</definition>
        <argsstring>(struct nvm_vblk *vblk)</argsstring>
        <name>nvm_vblk_pr</name>
        <param>
          <type>struct <ref refid="structnvm__vblk" kindref="compound">nvm_vblk</ref> *</type>
          <declname>vblk</declname>
        </param>
        <briefdescription>
<para>Print the virtual block in a humanly readable form. </para>        </briefdescription>
        <detaileddescription>
<para><parameterlist kind="param"><parameteritem>
<parameternamelist>
<parametername>vblk</parametername>
</parameternamelist>
<parameterdescription>
<para>The entity to print information about </para></parameterdescription>
</parameteritem>
</parameterlist>
</para>        </detaileddescription>
        <inbodydescription>
        </inbodydescription>
        <location file="/home/hkim/liblightnvm/include/liblightnvm.h" line="1229"/>
      </memberdef>
      </sectiondef>
    <briefdescription>
    </briefdescription>
    <detaileddescription>
    </detaileddescription>
    <programlisting>
<codeline lineno="1"><highlight class="comment">/*</highlight></codeline>
<codeline lineno="2"><highlight class="comment"><sp/>*<sp/>User<sp/>space<sp/>I/O<sp/>library<sp/>for<sp/>Open-Channel<sp/>SSDs</highlight></codeline>
<codeline lineno="3"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="4"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2017<sp/>Javier<sp/>Gonzáles<sp/>&lt;javier@cnexlabs.com&gt;</highlight></codeline>
<codeline lineno="5"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2017<sp/>Matias<sp/>Bjørling<sp/>&lt;matias@cnexlabs.com&gt;</highlight></codeline>
<codeline lineno="6"><highlight class="comment"><sp/>*<sp/>Copyright<sp/>(C)<sp/>2015-2017<sp/>Simon<sp/>A.<sp/>F.<sp/>Lund<sp/>&lt;slund@cnexlabs.com&gt;</highlight></codeline>
<codeline lineno="7"><highlight class="comment"><sp/>*<sp/>All<sp/>rights<sp/>reserved.</highlight></codeline>
<codeline lineno="8"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="9"><highlight class="comment"><sp/>*<sp/>Redistribution<sp/>and<sp/>use<sp/>in<sp/>source<sp/>and<sp/>binary<sp/>forms,<sp/>with<sp/>or<sp/>without</highlight></codeline>
<codeline lineno="10"><highlight class="comment"><sp/>*<sp/>modification,<sp/>are<sp/>permitted<sp/>provided<sp/>that<sp/>the<sp/>following<sp/>conditions<sp/>are<sp/>met:</highlight></codeline>
<codeline lineno="11"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="12"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Redistributions<sp/>of<sp/>source<sp/>code<sp/>must<sp/>retain<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="13"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer.</highlight></codeline>
<codeline lineno="14"><highlight class="comment"><sp/>*<sp/><sp/>-<sp/>Redistributions<sp/>in<sp/>binary<sp/>form<sp/>must<sp/>reproduce<sp/>the<sp/>above<sp/>copyright<sp/>notice,</highlight></codeline>
<codeline lineno="15"><highlight class="comment"><sp/>*<sp/><sp/>this<sp/>list<sp/>of<sp/>conditions<sp/>and<sp/>the<sp/>following<sp/>disclaimer<sp/>in<sp/>the<sp/>documentation</highlight></codeline>
<codeline lineno="16"><highlight class="comment"><sp/>*<sp/><sp/>and/or<sp/>other<sp/>materials<sp/>provided<sp/>with<sp/>the<sp/>distribution.</highlight></codeline>
<codeline lineno="17"><highlight class="comment"><sp/>*</highlight></codeline>
<codeline lineno="18"><highlight class="comment"><sp/>*<sp/>THIS<sp/>SOFTWARE<sp/>IS<sp/>PROVIDED<sp/>BY<sp/>THE<sp/>AUTHOR<sp/>AND<sp/>CONTRIBUTORS<sp/>``AS<sp/>IS&apos;&apos;<sp/>AND<sp/>ANY</highlight></codeline>
<codeline lineno="19"><highlight class="comment"><sp/>*<sp/>EXPRESS<sp/>OR<sp/>IMPLIED<sp/>WARRANTIES,<sp/>INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>THE<sp/>IMPLIED</highlight></codeline>
<codeline lineno="20"><highlight class="comment"><sp/>*<sp/>WARRANTIES<sp/>OF<sp/>MERCHANTABILITY<sp/>AND<sp/>FITNESS<sp/>FOR<sp/>A<sp/>PARTICULAR<sp/>PURPOSE<sp/>ARE</highlight></codeline>
<codeline lineno="21"><highlight class="comment"><sp/>*<sp/>DISCLAIMED.<sp/>IN<sp/>NO<sp/>EVENT<sp/>SHALL<sp/>THE<sp/>AUTHOR<sp/>OR<sp/>CONTRIBUTORS<sp/>BE<sp/>LIABLE<sp/>FOR<sp/>ANY</highlight></codeline>
<codeline lineno="22"><highlight class="comment"><sp/>*<sp/>DIRECT,<sp/>INDIRECT,<sp/>INCIDENTAL,<sp/>SPECIAL,<sp/>EXEMPLARY,<sp/>OR<sp/>CONSEQUENTIAL<sp/>DAMAGES</highlight></codeline>
<codeline lineno="23"><highlight class="comment"><sp/>*<sp/>(INCLUDING,<sp/>BUT<sp/>NOT<sp/>LIMITED<sp/>TO,<sp/>PROCUREMENT<sp/>OF<sp/>SUBSTITUTE<sp/>GOODS<sp/>OR<sp/>SERVICES;</highlight></codeline>
<codeline lineno="24"><highlight class="comment"><sp/>*<sp/>LOSS<sp/>OF<sp/>USE,<sp/>DATA,<sp/>OR<sp/>PROFITS;<sp/>OR<sp/>BUSINESS<sp/>INTERRUPTION)<sp/>HOWEVER<sp/>CAUSED<sp/>AND</highlight></codeline>
<codeline lineno="25"><highlight class="comment"><sp/>*<sp/>ON<sp/>ANY<sp/>THEORY<sp/>OF<sp/>LIABILITY,<sp/>WHETHER<sp/>IN<sp/>CONTRACT,<sp/>STRICT<sp/>LIABILITY,<sp/>OR<sp/>TORT</highlight></codeline>
<codeline lineno="26"><highlight class="comment"><sp/>*<sp/>(INCLUDING<sp/>NEGLIGENCE<sp/>OR<sp/>OTHERWISE)<sp/>ARISING<sp/>IN<sp/>ANY<sp/>WAY<sp/>OUT<sp/>OF<sp/>THE<sp/>USE<sp/>OF<sp/>THIS</highlight></codeline>
<codeline lineno="27"><highlight class="comment"><sp/>*<sp/>SOFTWARE,<sp/>EVEN<sp/>IF<sp/>ADVISED<sp/>OF<sp/>THE<sp/>POSSIBILITY<sp/>OF<sp/>SUCH<sp/>DAMAGE.</highlight></codeline>
<codeline lineno="28"><highlight class="comment"><sp/>*/</highlight></codeline>
<codeline lineno="32"><highlight class="preprocessor">#ifndef<sp/>__LIBLIGHTNVM_H</highlight></codeline>
<codeline lineno="33"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>__LIBLIGHTNVM_H</highlight></codeline>
<codeline lineno="34"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="35"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="36"><highlight class="preprocessor"></highlight><highlight class="keyword">extern</highlight><highlight class="normal"><sp/></highlight><highlight class="stringliteral">&quot;C&quot;</highlight><highlight class="normal"><sp/>{</highlight></codeline>
<codeline lineno="37"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="38"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="39"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;inttypes.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="40"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdint.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="41"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;stdlib.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="42"><highlight class="normal"></highlight></codeline>
<codeline lineno="43"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;sys/types.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="44"><highlight class="normal"></highlight><highlight class="preprocessor">#include<sp/>&lt;liblightnvm_spec.h&gt;</highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="45"><highlight class="normal"></highlight></codeline>
<codeline lineno="46" refid="liblightnvm_8h_1a650a6e5fc32308ee33c5dc7cdda00a50" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NVM_NADDR_MAX<sp/>64</highlight></codeline>
<codeline lineno="47"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="48" refid="liblightnvm_8h_1a2a2886bbf2aa6d9a66d5c92ce65aada4" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NVM_DEV_NAME_LEN<sp/>32</highlight></codeline>
<codeline lineno="49" refid="liblightnvm_8h_1abd2024cd46c9479750006c1c3c6501d8" refkind="member"><highlight class="preprocessor"></highlight><highlight class="preprocessor">#define<sp/>NVM_DEV_PATH_LEN<sp/>(NVM_DEV_NAME_LEN<sp/>+<sp/>5)</highlight></codeline>
<codeline lineno="50"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="51" refid="liblightnvm_8h_1a6d6840460d05fdd64c91d4eef75662ce" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NVM_FLAG_SCRBL<sp/>0x200<sp/><sp/><sp/><sp/>///&lt;<sp/>Scrambler<sp/>ON/OFF:<sp/>Context<sp/>sensitive</highlight></codeline>
<codeline lineno="52"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="56" refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549" kindref="member" tooltip="Enumeration of cmd back-ends used by liblightnvm.">nvm_be_id</ref><sp/>{</highlight></codeline>
<codeline lineno="57" refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549afe44a2c73c6123a73f6524a17ea28803" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549afe44a2c73c6123a73f6524a17ea28803" kindref="member" tooltip="Flag for ANY backend.">NVM_BE_ANY</ref><sp/>=<sp/>0x0,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="58" refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a43a7d77ee9e3c52bad97140aa722a3e9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a43a7d77ee9e3c52bad97140aa722a3e9" kindref="member" tooltip="Flag for the IOCTL backend.">NVM_BE_IOCTL</ref><sp/>=<sp/>0x1,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="59" refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a702ae1cf2e9c91bf60ebc00c8122db48" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a702ae1cf2e9c91bf60ebc00c8122db48" kindref="member" tooltip="Flag for the IOCTL + sysfs backend.">NVM_BE_SYSFS</ref><sp/>=<sp/>0x2,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="60" refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a67641cd8ad7eda97736036bec9e1a12e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ab1504ed920c76be203d8f49281484549a67641cd8ad7eda97736036bec9e1a12e" kindref="member" tooltip="Flag for the IOCTL + sysfs + LBA backend.">NVM_BE_LBA</ref><sp/>=<sp/>0x4,<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="61"><highlight class="normal">};</highlight></codeline>
<codeline lineno="62" refid="liblightnvm_8h_1a34141d89e9c936866a7a27624f23d363" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NVM_BE_ALL<sp/>(NVM_BE_IOCTL<sp/>|<sp/>NVM_BE_SYSFS<sp/>|<sp/>NVM_BE_LBA)<sp/><sp/><sp/>///&lt;<sp/>All<sp/>be<sp/>idents</highlight></codeline>
<codeline lineno="63"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="67" refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07" kindref="member" tooltip="Plane-mode access for IO.">nvm_pmode</ref><sp/>{</highlight></codeline>
<codeline lineno="68" refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07adc64703ef96d3a2cb403fb577b4ef1b1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07adc64703ef96d3a2cb403fb577b4ef1b1" kindref="member" tooltip="Single-plane.">NVM_FLAG_PMODE_SNGL</ref><sp/>=<sp/>0x0,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="69" refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07a1d02bead038d37a6ebe62a1d3fa6b9aa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07a1d02bead038d37a6ebe62a1d3fa6b9aa" kindref="member" tooltip="Dual-plane (NVM_IO_DUAL_ACCESS)">NVM_FLAG_PMODE_DUAL</ref><sp/>=<sp/>0x1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="70" refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07ac3d984398a952635422918c3bd3b0632" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a4d6747181aee0d88fa6663bce470eb07ac3d984398a952635422918c3bd3b0632" kindref="member" tooltip="Quad-plane (NVM_IO_QUAD_ACCESS)">NVM_FLAG_PMODE_QUAD</ref><sp/>=<sp/>0x2<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="71"><highlight class="normal">};</highlight></codeline>
<codeline lineno="72" refid="liblightnvm_8h_1a26058ff6296c00234c6e5b6f3ff974df" refkind="member"><highlight class="normal"></highlight><highlight class="preprocessor">#define<sp/>NVM_FLAG_DEFAULT<sp/>(NVM_FLAG_PMODE_SNGL<sp/>|<sp/>NVM_FLAG_SCRBL);</highlight></codeline>
<codeline lineno="73"><highlight class="preprocessor"></highlight></codeline>
<codeline lineno="77" refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bda" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bda" kindref="member" tooltip="Flags for device quirks.">nvm_quirks</ref><sp/>{</highlight></codeline>
<codeline lineno="78" refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa1e8018f268c5dd861a5e8278af94e04e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa1e8018f268c5dd861a5e8278af94e04e" kindref="member">NVM_QUIRK_PMODE_ERASE_RUNROLL</ref><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="79" refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa3b0572c95fb4400dabd4be0cfe0b536f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa3b0572c95fb4400dabd4be0cfe0b536f" kindref="member">NVM_QUIRK_NSID_BY_NAMECONV</ref><sp/>=<sp/>0x2,</highlight></codeline>
<codeline lineno="80" refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa35fd71e5deadcd4097e26a74183d38e5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa35fd71e5deadcd4097e26a74183d38e5" kindref="member">NVM_QUIRK_OOB_READ_1ST4BYTES_NULL</ref><sp/>=<sp/>0x4,</highlight></codeline>
<codeline lineno="81" refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa6c38d92e7b7440301f0ba17fd8eb859f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ada26a1d59d62c64491a76c372e991bdaa6c38d92e7b7440301f0ba17fd8eb859f" kindref="member">NVM_QUIRK_OOB_2LRG</ref><sp/>=<sp/>0x8</highlight></codeline>
<codeline lineno="82"><highlight class="normal">};</highlight></codeline>
<codeline lineno="83"><highlight class="normal"></highlight></codeline>
<codeline lineno="89" refid="structnvm__vblk" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref>;</highlight></codeline>
<codeline lineno="90"><highlight class="normal"></highlight></codeline>
<codeline lineno="105"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref>;</highlight></codeline>
<codeline lineno="106"><highlight class="normal"></highlight></codeline>
<codeline lineno="110" refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44" kindref="member" tooltip="Enumeration of pseudo meta mode.">nvm_meta_mode</ref><sp/>{</highlight></codeline>
<codeline lineno="111" refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a9f4379ed325296cacb7a1053a425445d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a9f4379ed325296cacb7a1053a425445d" kindref="member">NVM_META_MODE_NONE</ref><sp/>=<sp/>0x0,</highlight></codeline>
<codeline lineno="112" refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a184d4b06b1ae37c71eed25cf6da9ec30" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a184d4b06b1ae37c71eed25cf6da9ec30" kindref="member">NVM_META_MODE_ALPHA</ref><sp/>=<sp/>0x1,</highlight></codeline>
<codeline lineno="113" refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a3dc725757fbac107931e27027b07b2e1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1ad24fcd5b34f071e285afc56cd0675a44a3dc725757fbac107931e27027b07b2e1" kindref="member">NVM_META_MODE_CONST</ref><sp/>=<sp/>0x2</highlight></codeline>
<codeline lineno="114"><highlight class="normal">};</highlight></codeline>
<codeline lineno="115"><highlight class="normal"></highlight></codeline>
<codeline lineno="119" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615" kindref="member" tooltip="Enumeration of device bounds.">nvm_bounds</ref><sp/>{</highlight></codeline>
<codeline lineno="120" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615ac7f61012b286756f77c5680a6298866a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615ac7f61012b286756f77c5680a6298866a" kindref="member">NVM_BOUNDS_CHANNEL</ref><sp/>=<sp/>1,</highlight></codeline>
<codeline lineno="121" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a593219045e5745ee340075dc28edb14f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a593219045e5745ee340075dc28edb14f" kindref="member">NVM_BOUNDS_LUN</ref><sp/>=<sp/>2,</highlight></codeline>
<codeline lineno="122" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a4f068e6a83b781f283f2610107d7e976" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a4f068e6a83b781f283f2610107d7e976" kindref="member">NVM_BOUNDS_PLANE</ref><sp/>=<sp/>4,</highlight></codeline>
<codeline lineno="123" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a2ee61e476fc92bc557f5172df6814fbd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615a2ee61e476fc92bc557f5172df6814fbd" kindref="member">NVM_BOUNDS_BLOCK</ref><sp/>=<sp/>8,</highlight></codeline>
<codeline lineno="124" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615aeaa2e7617b65376d322ac4158650abfe" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615aeaa2e7617b65376d322ac4158650abfe" kindref="member">NVM_BOUNDS_PAGE</ref><sp/>=<sp/>16,</highlight></codeline>
<codeline lineno="125" refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615aa7795142a4123686eaab676f9ed0f1a1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a3f6c5d66f64be561293d9f0b3e877615aa7795142a4123686eaab676f9ed0f1a1" kindref="member">NVM_BOUNDS_SECTOR</ref><sp/>=<sp/>32</highlight></codeline>
<codeline lineno="126"><highlight class="normal">};</highlight></codeline>
<codeline lineno="127"><highlight class="normal"></highlight></codeline>
<codeline lineno="131" refid="structnvm__ret" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>{</highlight></codeline>
<codeline lineno="132" refid="structnvm__ret_1ab31dcc186ef5c43f1d272feefd655358" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__ret_1ab31dcc186ef5c43f1d272feefd655358" kindref="member" tooltip="NVMe command status / completion bits.">status</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="133" refid="structnvm__ret_1a7e8d58562b49876088f0ce77494fac46" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__ret_1a7e8d58562b49876088f0ce77494fac46" kindref="member" tooltip="NVMe command error codes.">result</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="134"><highlight class="normal">};</highlight></codeline>
<codeline lineno="135"><highlight class="normal"></highlight></codeline>
<codeline lineno="146" refid="structnvm__cmd" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>{</highlight></codeline>
<codeline lineno="147"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="148"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="149" refid="structnvm__cmd_1aabe41bf89d9f41298106cf04ebd9f7d4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1aabe41bf89d9f41298106cf04ebd9f7d4" kindref="member">opcode</ref>;</highlight></codeline>
<codeline lineno="150" refid="structnvm__cmd_1a8014afa6de6693b6f1f56e26c9eaa49c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1a8014afa6de6693b6f1f56e26c9eaa49c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="151" refid="structnvm__cmd_1a9392d794cd0aa63fb9d6a4573892d981" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a9392d794cd0aa63fb9d6a4573892d981" kindref="member">control</ref>;</highlight></codeline>
<codeline lineno="152" refid="structnvm__cmd_1a4f0643ad2c2da14456466e79d8f5de05" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a4f0643ad2c2da14456466e79d8f5de05" kindref="member">nppas</ref>;</highlight></codeline>
<codeline lineno="153" refid="structnvm__cmd_1a621a81248eb95fcdb88ea265e8fd6696" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a621a81248eb95fcdb88ea265e8fd6696" kindref="member">rsvd</ref>;</highlight></codeline>
<codeline lineno="154" refid="structnvm__cmd_1a96605da67cc6a9a948b94460c586f094" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a96605da67cc6a9a948b94460c586f094" kindref="member">metadata</ref>;</highlight></codeline>
<codeline lineno="155" refid="structnvm__cmd_1aeef90765e6918184ec82e0f78509ba0e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1aeef90765e6918184ec82e0f78509ba0e" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="156" refid="structnvm__cmd_1a8d3968f9e0ebc688086a6e32707e66a2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a8d3968f9e0ebc688086a6e32707e66a2" kindref="member">ppa_list</ref>;</highlight></codeline>
<codeline lineno="157" refid="structnvm__cmd_1a7c70b1d9d3ba79e0cbe04465b7aceebf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a7c70b1d9d3ba79e0cbe04465b7aceebf" kindref="member">metadata_len</ref>;</highlight></codeline>
<codeline lineno="158" refid="structnvm__cmd_1af030172e2f504c02c2bc38d758660f36" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1af030172e2f504c02c2bc38d758660f36" kindref="member">data_len</ref>;</highlight></codeline>
<codeline lineno="159" refid="structnvm__cmd_1a30fa6c30428e5326e2c0d7642a3b8870" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a30fa6c30428e5326e2c0d7642a3b8870" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="160" refid="structnvm__cmd_1aa14632fc85953735c1675311fa28eba4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1aa14632fc85953735c1675311fa28eba4" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="161" refid="structnvm__cmd_1a237f4900e79e21c9e2213a81cdb4d3b9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a237f4900e79e21c9e2213a81cdb4d3b9" kindref="member">rsvd3</ref>[3];</highlight></codeline>
<codeline lineno="162"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structnvm__cmd_1ab3e6db3b840caaed98fd58229e8d744e" kindref="member" tooltip="Common fields for vector user commands.">vuser</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="163"><highlight class="normal"></highlight></codeline>
<codeline lineno="164"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="165"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1aabe41bf89d9f41298106cf04ebd9f7d4" kindref="member">opcode</ref>;</highlight></codeline>
<codeline lineno="166"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1a8014afa6de6693b6f1f56e26c9eaa49c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="167" refid="structnvm__cmd_1aef328ec8ae3744911a125ead2efb0653" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1a621a81248eb95fcdb88ea265e8fd6696" kindref="member">rsvd</ref>[2];</highlight></codeline>
<codeline lineno="168" refid="structnvm__cmd_1abe30c492df3e0ad6f870f6d0c77f8ac5" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1abe30c492df3e0ad6f870f6d0c77f8ac5" kindref="member">nsid</ref>;</highlight></codeline>
<codeline lineno="169" refid="structnvm__cmd_1a39d50c008802728a6d4cffcc8b7d8ae4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a39d50c008802728a6d4cffcc8b7d8ae4" kindref="member">cdw2</ref>;</highlight></codeline>
<codeline lineno="170" refid="structnvm__cmd_1a2c24a809b8758291ae9ae2549e5d7f41" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a2c24a809b8758291ae9ae2549e5d7f41" kindref="member">cdw3</ref>;</highlight></codeline>
<codeline lineno="171"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a96605da67cc6a9a948b94460c586f094" kindref="member">metadata</ref>;</highlight></codeline>
<codeline lineno="172"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1aeef90765e6918184ec82e0f78509ba0e" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="173"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a7c70b1d9d3ba79e0cbe04465b7aceebf" kindref="member">metadata_len</ref>;</highlight></codeline>
<codeline lineno="174"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1af030172e2f504c02c2bc38d758660f36" kindref="member">data_len</ref>;</highlight></codeline>
<codeline lineno="175"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a8d3968f9e0ebc688086a6e32707e66a2" kindref="member">ppa_list</ref>;</highlight></codeline>
<codeline lineno="176"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a4f0643ad2c2da14456466e79d8f5de05" kindref="member">nppas</ref>;</highlight></codeline>
<codeline lineno="177"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a9392d794cd0aa63fb9d6a4573892d981" kindref="member">control</ref>;</highlight></codeline>
<codeline lineno="178" refid="structnvm__cmd_1a6ef52f6179bf1473cb696d690c312e8f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a6ef52f6179bf1473cb696d690c312e8f" kindref="member">cdw13</ref>;</highlight></codeline>
<codeline lineno="179" refid="structnvm__cmd_1a11042336910c2eb9a300877a529bd117" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a11042336910c2eb9a300877a529bd117" kindref="member">cdw14</ref>;</highlight></codeline>
<codeline lineno="180" refid="structnvm__cmd_1a6cc80ec95917a59a77ff99378e21e818" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a6cc80ec95917a59a77ff99378e21e818" kindref="member">cdw15</ref>;</highlight></codeline>
<codeline lineno="181"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a30fa6c30428e5326e2c0d7642a3b8870" kindref="member">status</ref>;</highlight></codeline>
<codeline lineno="182"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1aa14632fc85953735c1675311fa28eba4" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="183" refid="structnvm__cmd_1a254b71417ac6660071aff9d37bcab126" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a254b71417ac6660071aff9d37bcab126" kindref="member">timeout_ms</ref>;</highlight></codeline>
<codeline lineno="184"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structnvm__cmd_1aaf5a66e7b7d7b5319d11f72d2fd344d1" kindref="member" tooltip="Common fields for vector admin commands.">vadmin</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="185"><highlight class="normal"></highlight></codeline>
<codeline lineno="186"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="187"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1aabe41bf89d9f41298106cf04ebd9f7d4" kindref="member">opcode</ref>;</highlight></codeline>
<codeline lineno="188"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1a8014afa6de6693b6f1f56e26c9eaa49c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="189" refid="structnvm__cmd_1a91b1137effc37b13f8e18931bf48a8e4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a91b1137effc37b13f8e18931bf48a8e4" kindref="member">rsvd1</ref>;</highlight></codeline>
<codeline lineno="190"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1abe30c492df3e0ad6f870f6d0c77f8ac5" kindref="member">nsid</ref>;</highlight></codeline>
<codeline lineno="191"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a39d50c008802728a6d4cffcc8b7d8ae4" kindref="member">cdw2</ref>;</highlight></codeline>
<codeline lineno="192"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a2c24a809b8758291ae9ae2549e5d7f41" kindref="member">cdw3</ref>;</highlight></codeline>
<codeline lineno="193"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a96605da67cc6a9a948b94460c586f094" kindref="member">metadata</ref>;</highlight></codeline>
<codeline lineno="194"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1aeef90765e6918184ec82e0f78509ba0e" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="195"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a7c70b1d9d3ba79e0cbe04465b7aceebf" kindref="member">metadata_len</ref>;</highlight></codeline>
<codeline lineno="196"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1af030172e2f504c02c2bc38d758660f36" kindref="member">data_len</ref>;</highlight></codeline>
<codeline lineno="197" refid="structnvm__cmd_1a52392499d17f656994bdf1e85dc5c208" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a52392499d17f656994bdf1e85dc5c208" kindref="member">cdw10</ref>;</highlight></codeline>
<codeline lineno="198" refid="structnvm__cmd_1afffa145a8856cae03409f706113d615a" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1afffa145a8856cae03409f706113d615a" kindref="member">cdw11</ref>;</highlight></codeline>
<codeline lineno="199" refid="structnvm__cmd_1a6baaec451c78aeb112ab6bf03c3549a8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a6baaec451c78aeb112ab6bf03c3549a8" kindref="member">cdw12</ref>;</highlight></codeline>
<codeline lineno="200"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a6ef52f6179bf1473cb696d690c312e8f" kindref="member">cdw13</ref>;</highlight></codeline>
<codeline lineno="201"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a11042336910c2eb9a300877a529bd117" kindref="member">cdw14</ref>;</highlight></codeline>
<codeline lineno="202"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a6cc80ec95917a59a77ff99378e21e818" kindref="member">cdw15</ref>;</highlight></codeline>
<codeline lineno="203"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a254b71417ac6660071aff9d37bcab126" kindref="member">timeout_ms</ref>;</highlight></codeline>
<codeline lineno="204"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1aa14632fc85953735c1675311fa28eba4" kindref="member">result</ref>;</highlight></codeline>
<codeline lineno="205"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structnvm__cmd_1a7985eaf4c29c6791bcdd1d2663e07546" kindref="member" tooltip="Common fields for admin commands.">admin</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="206"><highlight class="normal"></highlight></codeline>
<codeline lineno="207"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="208"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1aabe41bf89d9f41298106cf04ebd9f7d4" kindref="member">opcode</ref>;</highlight></codeline>
<codeline lineno="209"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__cmd_1a8014afa6de6693b6f1f56e26c9eaa49c" kindref="member">flags</ref>;</highlight></codeline>
<codeline lineno="210"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a9392d794cd0aa63fb9d6a4573892d981" kindref="member">control</ref>;</highlight></codeline>
<codeline lineno="211" refid="structnvm__cmd_1aec2a3e52571f17d09ce92dd355ed71f2" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1aec2a3e52571f17d09ce92dd355ed71f2" kindref="member">nblocks</ref>;</highlight></codeline>
<codeline lineno="212"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1a621a81248eb95fcdb88ea265e8fd6696" kindref="member">rsvd</ref>;</highlight></codeline>
<codeline lineno="213"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a96605da67cc6a9a948b94460c586f094" kindref="member">metadata</ref>;</highlight></codeline>
<codeline lineno="214"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1aeef90765e6918184ec82e0f78509ba0e" kindref="member">addr</ref>;</highlight></codeline>
<codeline lineno="215" refid="structnvm__cmd_1a697fe555106a805bf414f838dbbfaf27" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__cmd_1a697fe555106a805bf414f838dbbfaf27" kindref="member">slba</ref>;</highlight></codeline>
<codeline lineno="216" refid="structnvm__cmd_1a486ce1c531ec20cc71b83c3b10b65e7b" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a486ce1c531ec20cc71b83c3b10b65e7b" kindref="member">dsmgmt</ref>;</highlight></codeline>
<codeline lineno="217" refid="structnvm__cmd_1a5a34aef4cf339703a7cb9f7c18164c81" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1a5a34aef4cf339703a7cb9f7c18164c81" kindref="member">reftag</ref>;</highlight></codeline>
<codeline lineno="218" refid="structnvm__cmd_1abae911a6a8b00d8468a5e8959bcab26d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1abae911a6a8b00d8468a5e8959bcab26d" kindref="member">apptag</ref>;</highlight></codeline>
<codeline lineno="219" refid="structnvm__cmd_1af9266d85c5b23ee9fb6b9f586686565d" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/><ref refid="structnvm__cmd_1af9266d85c5b23ee9fb6b9f586686565d" kindref="member">appmask</ref>;</highlight></codeline>
<codeline lineno="220"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structnvm__cmd_1a81d9f1abfb59bea58b0cfe5ff101a252" kindref="member" tooltip="Common fields for user commands.">user</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="221"><highlight class="normal"></highlight></codeline>
<codeline lineno="222" refid="structnvm__cmd_1ad2b80e70294dcca5397a10e419c354dc" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__cmd_1ad2b80e70294dcca5397a10e419c354dc" kindref="member" tooltip="Command as array of dwords.">cdw</ref>[20];<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="223"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="224"><highlight class="normal">};</highlight></codeline>
<codeline lineno="225"><highlight class="normal"></highlight></codeline>
<codeline lineno="234"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="liblightnvm_8h_1a6c54464f5d7a8a240c92e30f602cceb5" kindref="member" tooltip="Obtain string representation of the given plane-mode.">nvm_pmode_str</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmode);</highlight></codeline>
<codeline lineno="235"><highlight class="normal"></highlight></codeline>
<codeline lineno="246"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ab3e2e38522bf1d90de637c8a45cb672e" kindref="member" tooltip="Execute an user command on the given device.">nvm_cmd_user</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>*cmd,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="247"><highlight class="normal"></highlight></codeline>
<codeline lineno="258"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a130a85e2eacbf799c8aee9081eee72ae" kindref="member" tooltip="Execute an admin command on the given device.">nvm_cmd_admin</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>*cmd,</highlight></codeline>
<codeline lineno="259"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="260"><highlight class="normal"></highlight></codeline>
<codeline lineno="271"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a4046ca3060078da049535435fc90e95b" kindref="member" tooltip="Execute a vector user command on the given device.">nvm_cmd_vuser</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>*cmd,</highlight></codeline>
<codeline lineno="272"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="273"><highlight class="normal"></highlight></codeline>
<codeline lineno="284"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a5a2f13a2610219c48912aaeebd2e42ad" kindref="member" tooltip="Execute a vector admin command on the given device.">nvm_cmd_vadmin</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>*cmd,</highlight></codeline>
<codeline lineno="285"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="286"><highlight class="normal"></highlight></codeline>
<codeline lineno="292"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a4c5baff25ddba2b37bed6af0a88842fa" kindref="member" tooltip="Prints a text-representation of the given command.">nvm_cmd_pr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>*cmd);</highlight></codeline>
<codeline lineno="293"><highlight class="normal"></highlight></codeline>
<codeline lineno="299"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1abc6f867ed8611682f745673b2d10e9d9" kindref="member" tooltip="Prints a textual presentation of the vuser par of the given command.">nvm_cmd_vuser_pr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__cmd" kindref="compound" tooltip="Encapsulation of lowest-level user and admin commands.">nvm_cmd</ref><sp/>*cmd);</highlight></codeline>
<codeline lineno="300"><highlight class="normal"></highlight></codeline>
<codeline lineno="311" refid="structnvm__addr" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>{</highlight></codeline>
<codeline lineno="312"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">union<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="316"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="317" refid="structnvm__addr_1a2cf2b9213e60ea112ced2fbc01010a1e" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1a2cf2b9213e60ea112ced2fbc01010a1e" kindref="member" tooltip="Block address.">blk</ref><sp/><sp/><sp/><sp/>:<sp/>16;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="318" refid="structnvm__addr_1a1a8528fb9f2d7dbbf9407be00caccaba" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1a1a8528fb9f2d7dbbf9407be00caccaba" kindref="member" tooltip="Page address.">pg</ref><sp/><sp/><sp/><sp/><sp/>:<sp/>16;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="319" refid="structnvm__addr_1ae14fa3225942f6153ecfb3a23f6faf20" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1ae14fa3225942f6153ecfb3a23f6faf20" kindref="member" tooltip="Sector address.">sec</ref><sp/><sp/><sp/><sp/>:<sp/>8;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="320" refid="structnvm__addr_1af438cf03bb9bedfcae773e61c595be49" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1af438cf03bb9bedfcae773e61c595be49" kindref="member" tooltip="Plane address.">pl</ref><sp/><sp/><sp/><sp/><sp/>:<sp/>8;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="321" refid="structnvm__addr_1a9c7583b5aa40f35c56ea0b3379c78fe4" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1a9c7583b5aa40f35c56ea0b3379c78fe4" kindref="member" tooltip="LUN address.">lun</ref><sp/><sp/><sp/><sp/>:<sp/>8;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="322" refid="structnvm__addr_1ad040380153fc5f8fc36a88fd1af854b8" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1ad040380153fc5f8fc36a88fd1af854b8" kindref="member" tooltip="Channel address.">ch</ref><sp/><sp/><sp/><sp/><sp/>:<sp/>7;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="323" refid="structnvm__addr_1ad84fc8fa58bd2a0e64bdbad8f25927da" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1ad84fc8fa58bd2a0e64bdbad8f25927da" kindref="member" tooltip="Reserved.">rsvd</ref><sp/><sp/><sp/>:<sp/>1;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="324"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structnvm__addr_1a4edb21a84226a540df65ecbc87731224" kindref="member" tooltip="Address packing and geometric accessors.">g</ref>;</highlight></codeline>
<codeline lineno="325"><highlight class="normal"></highlight></codeline>
<codeline lineno="326"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">{</highlight></codeline>
<codeline lineno="327" refid="structnvm__addr_1abdf0985f0aa4735543ca9774d8005cbf" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1abdf0985f0aa4735543ca9774d8005cbf" kindref="member" tooltip="Address line.">line</ref><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>63;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="328" refid="structnvm__addr_1aee664db84a723ccd91dca7b34cf4a730" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1aee664db84a723ccd91dca7b34cf4a730" kindref="member" tooltip="Cache hint?">is_cached</ref><sp/><sp/><sp/><sp/><sp/><sp/>:<sp/>1;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="329"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>}<sp/><ref refid="structnvm__addr_1aecf3b30d68741d331e8a690b3a791b23" kindref="member">c</ref>;</highlight></codeline>
<codeline lineno="330"><highlight class="normal"></highlight></codeline>
<codeline lineno="331" refid="structnvm__addr_1af8c61ffaabf8869d6974df13ab2ea495" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__addr_1af8c61ffaabf8869d6974df13ab2ea495" kindref="member" tooltip="Address as ppa.">ppa</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="332"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>};</highlight></codeline>
<codeline lineno="333"><highlight class="normal">};</highlight></codeline>
<codeline lineno="334"><highlight class="normal"></highlight></codeline>
<codeline lineno="340" refid="structnvm__geo" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__geo" kindref="compound" tooltip="Representation of device and virtual block geometry.">nvm_geo</ref><sp/>{</highlight></codeline>
<codeline lineno="341" refid="structnvm__geo_1a202afc3940fcf740e1628d4082b44c25" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a202afc3940fcf740e1628d4082b44c25" kindref="member" tooltip="Number of channels on device.">nchannels</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="342" refid="structnvm__geo_1ab9ea66e8dded890438425b744985cd68" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1ab9ea66e8dded890438425b744985cd68" kindref="member" tooltip="Number of LUNs per channel.">nluns</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="343" refid="structnvm__geo_1a0928993c813ac7977cb00b77d583cf8c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a0928993c813ac7977cb00b77d583cf8c" kindref="member" tooltip="Number of planes per LUN.">nplanes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="344" refid="structnvm__geo_1ab743264c6be0d5fa0ac71ca95b95d8ac" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1ab743264c6be0d5fa0ac71ca95b95d8ac" kindref="member" tooltip="Number of blocks per plane.">nblocks</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="345" refid="structnvm__geo_1ac35e64684ff910d6a6c2e31add673753" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1ac35e64684ff910d6a6c2e31add673753" kindref="member" tooltip="Number of pages per block.">npages</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="346" refid="structnvm__geo_1a1fa8ed4fd3860b7721ff49e3d75e397f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a1fa8ed4fd3860b7721ff49e3d75e397f" kindref="member" tooltip="Number of sectors per page.">nsectors</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="347"><highlight class="normal"></highlight></codeline>
<codeline lineno="348" refid="structnvm__geo_1a75ffda38bc052d5a87ce637f0d37ec86" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a75ffda38bc052d5a87ce637f0d37ec86" kindref="member" tooltip="Number of bytes per page.">page_nbytes</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="349" refid="structnvm__geo_1a43fec2da1aa9a5a2998386132562994c" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a43fec2da1aa9a5a2998386132562994c" kindref="member" tooltip="Number of bytes per sector.">sector_nbytes</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="350" refid="structnvm__geo_1a8585f0920b8b563431b50c651059f124" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a8585f0920b8b563431b50c651059f124" kindref="member" tooltip="Number of bytes for out-of-bound / metadata.">meta_nbytes</ref>;<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="351"><highlight class="normal"></highlight></codeline>
<codeline lineno="352" refid="structnvm__geo_1a274c96ba885358fec8d56c689ea0d4ff" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo_1a274c96ba885358fec8d56c689ea0d4ff" kindref="member" tooltip="Total number of bytes in geometry.">tbytes</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="353"><highlight class="normal">};</highlight></codeline>
<codeline lineno="354"><highlight class="normal"></highlight></codeline>
<codeline lineno="358" refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003" refkind="member"><highlight class="keyword">enum</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003" kindref="member" tooltip="Representation of valid values of bad-block-table states.">nvm_bbt_state</ref><sp/>{</highlight></codeline>
<codeline lineno="359" refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003ab10831c00bebb2201412105f95dddebd" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003ab10831c00bebb2201412105f95dddebd" kindref="member" tooltip="Block is free AKA good.">NVM_BBT_FREE</ref><sp/>=<sp/>0x0,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="360" refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a0ff1d5d329422e484a6407867197f3c1" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a0ff1d5d329422e484a6407867197f3c1" kindref="member" tooltip="Block is bad.">NVM_BBT_BAD</ref><sp/>=<sp/>0x1,<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="361" refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a96557572e91470e8dacf68e882eddc4f" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a96557572e91470e8dacf68e882eddc4f" kindref="member" tooltip="Block has grown bad.">NVM_BBT_GBAD</ref><sp/>=<sp/>0x2,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="362" refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a9adafd8e2f694a6192fdce1e03b62951" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a9adafd8e2f694a6192fdce1e03b62951" kindref="member" tooltip="Block has been marked by device side.">NVM_BBT_DMRK</ref><sp/>=<sp/>0x4,<sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="363" refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a79b43392d6f18d1e064d59912c6e42c0" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><ref refid="liblightnvm_8h_1a98f61b94e6ccf5e687fa5be150b9d003a79b43392d6f18d1e064d59912c6e42c0" kindref="member" tooltip="Block has been marked by host side.">NVM_BBT_HMRK</ref><sp/>=<sp/>0x8<sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="364"><highlight class="normal">};</highlight></codeline>
<codeline lineno="365"><highlight class="normal"></highlight></codeline>
<codeline lineno="373" refid="structnvm__bbt" refkind="compound"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>{</highlight></codeline>
<codeline lineno="374" refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" kindref="member" tooltip="Device on which the bbt resides.">dev</ref>;<sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="375" refid="structnvm__bbt_1aadf9a370ec90d297d60ca3729d912577" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/><ref refid="structnvm__bbt_1aadf9a370ec90d297d60ca3729d912577" kindref="member" tooltip="Address of the LUN described by the bbt.">addr</ref>;<sp/><sp/><sp/></highlight></codeline>
<codeline lineno="376" refid="structnvm__bbt_1abfd11ee021cbd2dfbad04a38f536eceb" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint64_t<sp/><ref refid="structnvm__bbt_1abfd11ee021cbd2dfbad04a38f536eceb" kindref="member" tooltip="Total # of blocks in lun.">nblks</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="377" refid="structnvm__bbt_1a48bc17e09f954513f57e2b78a0c4bf06" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__bbt_1a48bc17e09f954513f57e2b78a0c4bf06" kindref="member" tooltip="# of manufacturer marked bad blocks">nbad</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="378" refid="structnvm__bbt_1a7d17d898fb9d71abcb0ec55393dda423" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__bbt_1a7d17d898fb9d71abcb0ec55393dda423" kindref="member" tooltip="# of grown bad blocks">ngbad</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="379" refid="structnvm__bbt_1af53027b58b577c5523d777ff33467093" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__bbt_1af53027b58b577c5523d777ff33467093" kindref="member" tooltip="# of device reserved/marked blocks">ndmrk</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="380" refid="structnvm__bbt_1ab81bb90aebffc217c789bf5e09745ce9" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint32_t<sp/><ref refid="structnvm__bbt_1ab81bb90aebffc217c789bf5e09745ce9" kindref="member" tooltip="# of of host reserved/marked blocks">nhmrk</ref>;<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="381" refid="structnvm__bbt_1afab4b74396e58599717b694a0c077aaa" refkind="member"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint8_t<sp/><ref refid="structnvm__bbt_1afab4b74396e58599717b694a0c077aaa" kindref="member" tooltip="Array of block status for each block in LUN.">blks</ref>[];<sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight></codeline>
<codeline lineno="382"><highlight class="normal">};</highlight></codeline>
<codeline lineno="383"><highlight class="normal"></highlight></codeline>
<codeline lineno="387"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1aa4466103089a0ba08e23ea94e429ec13" kindref="member">nvm_ver_major</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="388"><highlight class="normal"></highlight></codeline>
<codeline lineno="392"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ad44a458c7ca1933978b04b5e215fe081" kindref="member">nvm_ver_minor</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="393"><highlight class="normal"></highlight></codeline>
<codeline lineno="397"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a67d9bd2088d56cf0d5c5ce8dee858649" kindref="member">nvm_ver_patch</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="398"><highlight class="normal"></highlight></codeline>
<codeline lineno="402"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ad11691ce2b6faa5bfb2b2ae261d9b538" kindref="member" tooltip="Prints version information about the library.">nvm_ver_pr</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal">);</highlight></codeline>
<codeline lineno="403"><highlight class="normal"></highlight></codeline>
<codeline lineno="407"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a555f928b395514817d7a990ac4521bad" kindref="member" tooltip="Prints a humanly readable description of given boundary mask.">nvm_bounds_pr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>mask);</highlight></codeline>
<codeline lineno="408"><highlight class="normal"></highlight></codeline>
<codeline lineno="417"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a61f4b316bb5d1b434d2c73ad82e48c10" kindref="member" tooltip="Read up to `count` bytes from the given `device` starting at the given `offset` into the given buffer...">nvm_lba_pread</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="418"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/>offset);</highlight></codeline>
<codeline lineno="419"><highlight class="normal"></highlight></codeline>
<codeline lineno="428"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1ac594de405f8d471266acf536417250ce" kindref="member" tooltip="Write up to `count` bytes from the buffer starting at `buf` to the given device `dev` at given `offse...">nvm_lba_pwrite</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="429"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>off_t<sp/>offset);</highlight></codeline>
<codeline lineno="430"><highlight class="normal"></highlight></codeline>
<codeline lineno="436"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a6e2c1c4c000426c56906dee5d06a619f" kindref="member" tooltip="Prints a humanly readable representation the given `struct nvm_ret`.">nvm_ret_pr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="437"><highlight class="normal"></highlight></codeline>
<codeline lineno="449"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>*<ref refid="liblightnvm_8h_1aca47f5add1d8e1c8951a361a5d31f7d0" kindref="member" tooltip="Retrieves a bad block table from device.">nvm_bbt_get</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" kindref="member" tooltip="Device on which the bbt resides.">dev</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/><ref refid="structnvm__bbt_1aadf9a370ec90d297d60ca3729d912577" kindref="member" tooltip="Address of the LUN described by the bbt.">addr</ref>,</highlight></codeline>
<codeline lineno="450"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="451"><highlight class="normal"></highlight></codeline>
<codeline lineno="462"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a6931a3845f299650c4de5a152a2c875d" kindref="member" tooltip="Updates the bad-block-table on given device using the provided bbt.">nvm_bbt_set</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" kindref="member" tooltip="Device on which the bbt resides.">dev</ref>,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>*bbt,</highlight></codeline>
<codeline lineno="463"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="464"><highlight class="normal"></highlight></codeline>
<codeline lineno="484"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a2dbbb2e922bdca909354da7f2ecba9a3" kindref="member" tooltip="Mark addresses good, bad, or host-bad.">nvm_bbt_mark</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" kindref="member" tooltip="Device on which the bbt resides.">dev</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addrs[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs,</highlight></codeline>
<codeline lineno="485"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>flags,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="486"><highlight class="normal"></highlight></codeline>
<codeline lineno="498"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a8b9b1792eefc95cd2933799e6057b0b2" kindref="member" tooltip="Persist the bad-block-table at `addr` on device and deallocate managed memory for the given bad-block...">nvm_bbt_flush</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" kindref="member" tooltip="Device on which the bbt resides.">dev</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/><ref refid="structnvm__bbt_1aadf9a370ec90d297d60ca3729d912577" kindref="member" tooltip="Address of the LUN described by the bbt.">addr</ref>,</highlight></codeline>
<codeline lineno="499"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="500"><highlight class="normal"></highlight></codeline>
<codeline lineno="510"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a11f997960939bcad35c78c497702d0c8" kindref="member" tooltip="Persist all bad-block-tables associated with the given `dev`.">nvm_bbt_flush_all</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="structnvm__bbt_1a441963eec2feeca3adcd3ac530da0dca" kindref="member" tooltip="Device on which the bbt resides.">dev</ref>,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="511"><highlight class="normal"></highlight></codeline>
<codeline lineno="519"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>*<ref refid="liblightnvm_8h_1a341957842cd30286e6933aefc93884b5" kindref="member" tooltip="Allocate a copy of the given bad-block-table.">nvm_bbt_alloc_cp</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>*bbt);</highlight></codeline>
<codeline lineno="520"><highlight class="normal"></highlight></codeline>
<codeline lineno="526"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1aeeef11a1285a6fa2695a3367afdb3770" kindref="member" tooltip="Destroys a given bad-block-table.">nvm_bbt_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>*bbt);</highlight></codeline>
<codeline lineno="527"><highlight class="normal"></highlight></codeline>
<codeline lineno="533"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ac5f107f6aba4ae9aa97b154938f02dd1" kindref="member" tooltip="Prints a humanly readable representation of the given bad-block-table.">nvm_bbt_pr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__bbt" kindref="compound" tooltip="Representation of bad-block-table.">nvm_bbt</ref><sp/>*bbt);</highlight></codeline>
<codeline lineno="534"><highlight class="normal"></highlight></codeline>
<codeline lineno="538"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a0d57cde71f4ee77503a443daca3b3261" kindref="member" tooltip="Prints a humanly readable representation of the given bad-block-table state.">nvm_bbt_state_pr</ref>(</highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>state);</highlight></codeline>
<codeline lineno="539"><highlight class="normal"></highlight></codeline>
<codeline lineno="543"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ae1e030c59680f889363fc51a6875dea4" kindref="member" tooltip="Prints human readable representation of the given geometry.">nvm_geo_pr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo" kindref="compound" tooltip="Representation of device and virtual block geometry.">nvm_geo</ref><sp/>*geo);</highlight></codeline>
<codeline lineno="544"><highlight class="normal"></highlight></codeline>
<codeline lineno="552"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="liblightnvm_8h_1adce9240457c84bf95e34ed9bb3cdf05e" kindref="member" tooltip="Creates a handle to given device path.">nvm_dev_open</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dev_path);</highlight></codeline>
<codeline lineno="553"><highlight class="normal"></highlight></codeline>
<codeline lineno="562"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="liblightnvm_8h_1a1f04d3d65d91d54bb2bf9d8100196f88" kindref="member" tooltip="Creates a handle to given device path.">nvm_dev_openf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*dev_path,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>flags);</highlight></codeline>
<codeline lineno="563"><highlight class="normal"></highlight></codeline>
<codeline lineno="569"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a89508f4d3ba8a4ab8d7152e175702ad9" kindref="member" tooltip="Destroys device-handle.">nvm_dev_close</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="570"><highlight class="normal"></highlight></codeline>
<codeline lineno="576"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a3cc4daae722afb47925fa830fb9b3bcc" kindref="member" tooltip="Prints misc.">nvm_dev_attr_pr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="577"><highlight class="normal"></highlight></codeline>
<codeline lineno="583"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1afb6bfa7f3512c27a4ab7b327a3a718d1" kindref="member" tooltip="Prints all information about the device associated with the given handle.">nvm_dev_pr</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="584"><highlight class="normal"></highlight></codeline>
<codeline lineno="591"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a89944f459fdad2b63528b4cc7003c0dc" kindref="member" tooltip="Returns the file-descriptor associated with the given device.">nvm_dev_get_fd</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="592"><highlight class="normal"></highlight></codeline>
<codeline lineno="599"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="liblightnvm_8h_1af414fb32da3f2ef07b2c09f7109e30ec" kindref="member" tooltip="Returns the name associated with the given device.">nvm_dev_get_name</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="600"><highlight class="normal"></highlight></codeline>
<codeline lineno="607"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*<ref refid="liblightnvm_8h_1a949c7cee0c3e437c36306a3d04d01ad8" kindref="member" tooltip="Returns the path associated with the given device.">nvm_dev_get_path</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="608"><highlight class="normal"></highlight></codeline>
<codeline lineno="616"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a397af18d57c152681dd8d33c2e117113" kindref="member" tooltip="Returns the NVME namespace identifier of the given device.">nvm_dev_get_nsid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="617"><highlight class="normal"></highlight></codeline>
<codeline lineno="624"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ac29ac06b23e63760bd5ec7a425277791" kindref="member" tooltip="Returns the verid of the given device.">nvm_dev_get_verid</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="625"><highlight class="normal"></highlight></codeline>
<codeline lineno="632"><highlight class="normal">uint32_t<sp/><ref refid="liblightnvm_8h_1a7afc9f3aa3eb8feac8977d2689527be8" kindref="member" tooltip="Returns the media-controller capabilities mask of the given device.">nvm_dev_get_mccap</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="633"><highlight class="normal"></highlight></codeline>
<codeline lineno="640"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1afc453a85d2883240dcda1e3d9f7ec3e5" kindref="member" tooltip="Returns the default plane_mode of the given device.">nvm_dev_get_pmode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="641"><highlight class="normal"></highlight></codeline>
<codeline lineno="650"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a3805b60fb03909a44a4668a12eb7800b" kindref="member" tooltip="Set the default plane-mode for the given device.">nvm_dev_set_pmode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>pmode);</highlight></codeline>
<codeline lineno="651"><highlight class="normal"></highlight></codeline>
<codeline lineno="658"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1af043aab951556042e8e36f6b15bc23e5" kindref="member" tooltip="Returns the mask of quirks for the given device.">nvm_dev_get_quirks</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="659"><highlight class="normal"></highlight></codeline>
<codeline lineno="668"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a870e57f2b29bde5434f470c01b3b7506" kindref="member" tooltip="Set the default plane-mode for the given device.">nvm_dev_set_quirks</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>quirks);</highlight></codeline>
<codeline lineno="669"><highlight class="normal"></highlight></codeline>
<codeline lineno="677"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">nvm_spec_ppaf_nand<sp/>*<ref refid="liblightnvm_8h_1aad0ab0099982dcf1904a432332c8806a" kindref="member" tooltip="Returns the ppa-format of the given device.">nvm_dev_get_ppaf</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="678"><highlight class="normal"></highlight></codeline>
<codeline lineno="686"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal">nvm_spec_ppaf_nand_mask<sp/>*<ref refid="liblightnvm_8h_1aea644d1957d556428468a16a3ed4ceef" kindref="member" tooltip="Returns the ppa-format mask of the given device.">nvm_dev_get_ppaf_mask</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="687"><highlight class="normal"></highlight></codeline>
<codeline lineno="694"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a2f4483e4a3e5b125d13ccb290d311c97" kindref="member" tooltip="Returns the &amp;#39;meta-mode&amp;#39; of the given device.">nvm_dev_get_meta_mode</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="695"><highlight class="normal"></highlight></codeline>
<codeline lineno="708"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a718098e61ba492a1750321480a5fe382" kindref="member" tooltip="Set the default &amp;#39;meta-mode&amp;#39; of the given device.">nvm_dev_set_meta_mode</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>meta_mode);</highlight></codeline>
<codeline lineno="709"><highlight class="normal"></highlight></codeline>
<codeline lineno="716"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1abec2b2d31324f9a8856ee2d49314302f" kindref="member" tooltip="Returns the maximum number of addresses to use when sending erases to device.">nvm_dev_get_erase_naddrs_max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="717"><highlight class="normal"></highlight></codeline>
<codeline lineno="727"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ad4fb4c3c3a8c0f05e70888a6a1e7a978" kindref="member" tooltip="Returns whether caching is enabled for bad-block-tables on the device.">nvm_dev_get_bbts_cached</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="728"><highlight class="normal"></highlight></codeline>
<codeline lineno="734"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a1d67daea17bcd7f89de49a5e4de728f3" kindref="member" tooltip="Returns the backend identifier associated with the given device.">nvm_dev_get_be_id</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="735"><highlight class="normal"></highlight></codeline>
<codeline lineno="742"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a0373ef8edc1578351e999f7df8737b04" kindref="member" tooltip="Set the maximum number of addresses to use for reads, that is, when invoking nvm_addr_read.">nvm_dev_get_read_naddrs_max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="743"><highlight class="normal"></highlight></codeline>
<codeline lineno="750"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1af612020fdd37f3bfb6909dbd80adbace" kindref="member" tooltip="Set the maximum number of addresses to use for writes, that is, when invoking nvm_addr_write.">nvm_dev_get_write_naddrs_max</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="751"><highlight class="normal"></highlight></codeline>
<codeline lineno="761"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a4dfe338fa9e6102111ab8b7fe66b015b" kindref="member" tooltip="Set the maximum number of addresses to use for erases, that is, when invoking nvm_addr_erase.">nvm_dev_set_erase_naddrs_max</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs);</highlight></codeline>
<codeline lineno="762"><highlight class="normal"></highlight></codeline>
<codeline lineno="771"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a1918f6acec6f8308d69137bfb8c9d5e1" kindref="member" tooltip="Sets whether retrieval and changes to bad-block-tables should be cached.">nvm_dev_set_bbts_cached</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>bbts_cached);</highlight></codeline>
<codeline lineno="772"><highlight class="normal"></highlight></codeline>
<codeline lineno="782"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a141efa65b01c364eb1d80a75e86fecae" kindref="member" tooltip="Set the maximum number of addresses to use for erases, that is, when invoking nvm_addr_erase.">nvm_dev_set_read_naddrs_max</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs);</highlight></codeline>
<codeline lineno="783"><highlight class="normal"></highlight></codeline>
<codeline lineno="793"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1aa4c23ba6d3fd304822c0b110d2a16d68" kindref="member" tooltip="Set the maximum number of addresses to use for erases, that is, when invoking nvm_addr_erase.">nvm_dev_set_write_naddrs_max</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs);</highlight></codeline>
<codeline lineno="794"><highlight class="normal"></highlight></codeline>
<codeline lineno="805"><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__geo" kindref="compound" tooltip="Representation of device and virtual block geometry.">nvm_geo</ref><sp/>*<ref refid="liblightnvm_8h_1ae77d2103b19bcc9f0b738e3f6526983b" kindref="member" tooltip="Returns the geometry of the given device.">nvm_dev_get_geo</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev);</highlight></codeline>
<codeline lineno="806"><highlight class="normal"></highlight></codeline>
<codeline lineno="821"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="liblightnvm_8h_1afc8ae47b17cfb871ea0abd60de7f521a" kindref="member" tooltip="Allocate a buffer aligned to match the given geometry.">nvm_buf_alloc</ref>(</highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo" kindref="compound" tooltip="Representation of device and virtual block geometry.">nvm_geo</ref><sp/>*geo,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="822"><highlight class="normal"></highlight></codeline>
<codeline lineno="835"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*<ref refid="liblightnvm_8h_1a59e9463e24fc966eb59e670bb6c9fb8d" kindref="member" tooltip="Allocate a buffer of the given size with the given alignment.">nvm_buf_alloca</ref>(</highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>alignment,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="836"><highlight class="normal"></highlight></codeline>
<codeline lineno="843"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a16df329c7ba7ab06558e99ba50b28ec9" kindref="member" tooltip="Fills `buf` with chars A-Z.">nvm_buf_fill</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="844"><highlight class="normal"></highlight></codeline>
<codeline lineno="851"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ac100663d6564f62419d8bcb2cb2d7f6f" kindref="member" tooltip="Free the given buffer, calling regular &amp;quot;free&amp;quot; on the buffer might fail.">nvm_buf_free</ref>(</highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf);</highlight></codeline>
<codeline lineno="852"><highlight class="normal"></highlight></codeline>
<codeline lineno="859"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ab2d8c2634a332e3ca32055b17ef7b83e" kindref="member" tooltip="Prints `buf` to stdout.">nvm_buf_pr</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes);</highlight></codeline>
<codeline lineno="860"><highlight class="normal"></highlight></codeline>
<codeline lineno="870"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a82f4d705bf4c2b65b78fea2110db57f4" kindref="member" tooltip="Write content of buffer into file.">nvm_buf_to_file</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="871"><highlight class="normal"></highlight></codeline>
<codeline lineno="881"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ab10d2fe97a51f6c5189438ded36a4697" kindref="member" tooltip="Read content of file into buffer.">nvm_buf_from_file</ref>(</highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>nbytes,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">char</highlight><highlight class="normal"><sp/>*path);</highlight></codeline>
<codeline lineno="882"><highlight class="normal"></highlight></codeline>
<codeline lineno="900"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a1b77997985a372c961d79d09340b4108" kindref="member" tooltip="Erase nvm at given addresses.">nvm_addr_erase</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addrs[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs,</highlight></codeline>
<codeline lineno="901"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/>uint16_t<sp/>flags,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="902"><highlight class="normal"></highlight></codeline>
<codeline lineno="925"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a3e1e58dc35ba7482dfafc7bec0464d94" kindref="member" tooltip="Write content of buf to nvm at address(es)">nvm_addr_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addrs[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs,</highlight></codeline>
<codeline lineno="926"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*meta,<sp/>uint16_t<sp/>flags,</highlight></codeline>
<codeline lineno="927"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="928"><highlight class="normal"></highlight></codeline>
<codeline lineno="951"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a6a7ea06fc56c5492a758542849c366ef" kindref="member" tooltip="Read content of nvm at addresses into buf.">nvm_addr_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addrs[],<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs,</highlight></codeline>
<codeline lineno="952"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*meta,<sp/>uint16_t<sp/>flags,</highlight></codeline>
<codeline lineno="953"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__ret" kindref="compound" tooltip="Encapsulation and representation of lower-level error conditions.">nvm_ret</ref><sp/>*ret);</highlight></codeline>
<codeline lineno="954"><highlight class="normal"></highlight></codeline>
<codeline lineno="962"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a159547b8ca24e872b999877407bffda9" kindref="member" tooltip="Checks whether the given address exceeds bounds of the given geometry.">nvm_addr_check</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addr,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__geo" kindref="compound" tooltip="Representation of device and virtual block geometry.">nvm_geo</ref><sp/>*geo);</highlight></codeline>
<codeline lineno="963"><highlight class="normal"></highlight></codeline>
<codeline lineno="971"><highlight class="normal">uint64_t<sp/><ref refid="liblightnvm_8h_1add18460eeec07ae8ce6b9f471ca83a9e" kindref="member" tooltip="Converts a given physical address generic-format to device-format.">nvm_addr_gen2dev</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addr);</highlight></codeline>
<codeline lineno="972"><highlight class="normal"></highlight></codeline>
<codeline lineno="980"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/><ref refid="liblightnvm_8h_1a7dd099dc686dac92081bd7c4c37a5895" kindref="member" tooltip="Converts a given physical address on device-format to generic-format.">nvm_addr_dev2gen</ref>(struct<sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/>uint64_t<sp/>addr);</highlight></codeline>
<codeline lineno="981"><highlight class="normal"></highlight></codeline>
<codeline lineno="989"><highlight class="normal">uint64_t<sp/><ref refid="liblightnvm_8h_1adbc37c88b542086d0eb6d199c662c112" kindref="member" tooltip="Converts a given physical address on device-format to lba-format.">nvm_addr_dev2lba</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/>uint64_t<sp/>addr);</highlight></codeline>
<codeline lineno="990"><highlight class="normal"></highlight></codeline>
<codeline lineno="998"><highlight class="normal">uint64_t<sp/><ref refid="liblightnvm_8h_1a72f0d9b320d381ec8032a7b7ccf887b6" kindref="member" tooltip="Converts a given physical address on device-format to lba-offset-format.">nvm_addr_dev2off</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/>uint64_t<sp/>addr);</highlight></codeline>
<codeline lineno="999"><highlight class="normal"></highlight></codeline>
<codeline lineno="1007"><highlight class="normal">uint64_t<sp/><ref refid="liblightnvm_8h_1a480ec1815404e58f793ea59794fa912f" kindref="member" tooltip="Converts a given physical address on generic-format to byte offset.">nvm_addr_gen2off</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addr);</highlight></codeline>
<codeline lineno="1008"><highlight class="normal"></highlight></codeline>
<codeline lineno="1016"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/><ref refid="liblightnvm_8h_1aee7bdce116af860a64aaea40c99152eb" kindref="member" tooltip="Converts a given byte offset to physical address on generic-format.">nvm_addr_off2gen</ref>(struct<sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/>uint64_t<sp/>off);</highlight></codeline>
<codeline lineno="1017"><highlight class="normal"></highlight></codeline>
<codeline lineno="1025"><highlight class="normal">uint64_t<sp/><ref refid="liblightnvm_8h_1af7269ce2b8cd9d32b033e79f8439f2e5" kindref="member" tooltip="Converts a given physical address on generic-format to LBA offset.">nvm_addr_gen2lba</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addr);</highlight></codeline>
<codeline lineno="1026"><highlight class="normal"></highlight></codeline>
<codeline lineno="1034"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/><ref refid="liblightnvm_8h_1a9cb32c309e0d6b7c23a455fa97d303be" kindref="member" tooltip="Converts a given LBA offset to physical address on generic-format.">nvm_addr_lba2gen</ref>(struct<sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/>uint64_t<sp/>off);</highlight></codeline>
<codeline lineno="1035"><highlight class="normal"></highlight></codeline>
<codeline lineno="1041"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a7be914f85027e87b98d1d80148874ff7" kindref="member" tooltip="Prints a humanly readable representation of the given address.">nvm_addr_pr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addr);</highlight></codeline>
<codeline lineno="1042"><highlight class="normal"></highlight></codeline>
<codeline lineno="1046"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a68d50a6ea5c4d5e6c65ba27e674bffca" kindref="member" tooltip="Prints a humanly readable representation of the given list of addresses.">nvm_addr_prn</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>*addr,<sp/></highlight><highlight class="keywordtype">unsigned</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs);</highlight></codeline>
<codeline lineno="1047"><highlight class="normal"></highlight></codeline>
<codeline lineno="1058"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*<ref refid="liblightnvm_8h_1aa63a092d2f015a4645dab88c70ec6f10" kindref="member" tooltip="Allocate a virtual block, spanning a given set of physical blocks.">nvm_vblk_alloc</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>addrs[],</highlight></codeline>
<codeline lineno="1059"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>naddrs);</highlight></codeline>
<codeline lineno="1060"><highlight class="normal"></highlight></codeline>
<codeline lineno="1074"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*<ref refid="liblightnvm_8h_1a2fe8c7aced82ea70540457c9ee725d69" kindref="member" tooltip="Allocate a virtual block (spanning planes, channels, and LUNs)">nvm_vblk_alloc_line</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*dev,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch_bgn,</highlight></codeline>
<codeline lineno="1075"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>ch_end,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lun_bgn,<sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>lun_end,</highlight></codeline>
<codeline lineno="1076"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/>blk);</highlight></codeline>
<codeline lineno="1077"><highlight class="normal"></highlight></codeline>
<codeline lineno="1083"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1ac3376a44e79e1fc321edfc483f17e9b5" kindref="member" tooltip="Destroy a virtual block.">nvm_vblk_free</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1084"><highlight class="normal"></highlight></codeline>
<codeline lineno="1095"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1ad61923687309e99e0999344fcdab71c8" kindref="member" tooltip="Erase a virtual block.">nvm_vblk_erase</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1096"><highlight class="normal"></highlight></codeline>
<codeline lineno="1113"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a85d3d7291444aec42241baa5ced95a39" kindref="member" tooltip="Write to a virtual block.">nvm_vblk_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="1114"><highlight class="normal"></highlight></codeline>
<codeline lineno="1132"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a97d743b3a7a4c3db4b359c74dbf8237c" kindref="member" tooltip="Write to a virtual block at a given offset.">nvm_vblk_pwrite</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk,<sp/></highlight><highlight class="keyword">const</highlight><highlight class="normal"><sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="1133"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="1134"><highlight class="normal"></highlight></codeline>
<codeline lineno="1147"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1afb47188711a2ec1dd1fa7b2754b4a57c" kindref="member" tooltip="Pad the virtual block with synthetic data.">nvm_vblk_pad</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1148"><highlight class="normal"></highlight></codeline>
<codeline lineno="1152"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a7c6feddfd061158168de5ca63ac44275" kindref="member" tooltip="Read from a virtual block.">nvm_vblk_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count);</highlight></codeline>
<codeline lineno="1153"><highlight class="normal"></highlight></codeline>
<codeline lineno="1157"><highlight class="normal">ssize_t<sp/><ref refid="liblightnvm_8h_1a57c35c8050d0593ff26053958b5a8adf" kindref="member" tooltip="Read from a virtual block at given offset.">nvm_vblk_pread</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk,<sp/></highlight><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/>*buf,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>count,</highlight></codeline>
<codeline lineno="1158"><highlight class="normal"><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/><sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>offset);</highlight></codeline>
<codeline lineno="1159"><highlight class="normal"></highlight></codeline>
<codeline lineno="1165"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__dev" kindref="compound" tooltip="Opaque handle for NVM devices.">nvm_dev</ref><sp/>*<ref refid="liblightnvm_8h_1aac922386d32a0a3b8c2f995babb3fbb6" kindref="member" tooltip="Retrieve the device associated with the given virtual block.">nvm_vblk_get_dev</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1166"><highlight class="normal"></highlight></codeline>
<codeline lineno="1172"><highlight class="keyword">struct<sp/></highlight><highlight class="normal"><ref refid="structnvm__addr" kindref="compound" tooltip="Encapsulation of generic physical nvm addressing.">nvm_addr</ref><sp/>*<ref refid="liblightnvm_8h_1a2c95349b0051549491330735c67aa3eb" kindref="member" tooltip="Retrieve the set of addresses defining the virtual block.">nvm_vblk_get_addrs</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1173"><highlight class="normal"></highlight></codeline>
<codeline lineno="1179"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a69ae36e185cc948d3934f565dd98a5ac" kindref="member" tooltip="Retrieve the number of addresses in the address set of the virtual block.">nvm_vblk_get_naddrs</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1180"><highlight class="normal"></highlight></codeline>
<codeline lineno="1186"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a664c068485c41bca75058937cb29252e" kindref="member" tooltip="Retrieve the size, in bytes, of a given virtual block.">nvm_vblk_get_nbytes</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1187"><highlight class="normal"></highlight></codeline>
<codeline lineno="1193"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a6dcb07267d60e69380b3cb688e119379" kindref="member" tooltip="Retrieve the read cursor position for the given virtual block.">nvm_vblk_get_pos_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1194"><highlight class="normal"></highlight></codeline>
<codeline lineno="1200"><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1abc6d07b42f6115393c2764c1fb4a97a1" kindref="member" tooltip="Retrieve the write cursor position for the given virtual block.">nvm_vblk_get_pos_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1201"><highlight class="normal"></highlight></codeline>
<codeline lineno="1211"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a3da89ae4e65a37e9186d26a5cd5ce7ff" kindref="member" tooltip="Set the read cursor position for the given virtual block.">nvm_vblk_set_pos_read</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="1212"><highlight class="normal"></highlight></codeline>
<codeline lineno="1222"><highlight class="keywordtype">int</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1a21d24d5190b579ef1fa6c368aa23b470" kindref="member" tooltip="Set the write cursor position for the given virtual block.">nvm_vblk_set_pos_write</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk,<sp/></highlight><highlight class="keywordtype">size_t</highlight><highlight class="normal"><sp/>pos);</highlight></codeline>
<codeline lineno="1223"><highlight class="normal"></highlight></codeline>
<codeline lineno="1229"><highlight class="keywordtype">void</highlight><highlight class="normal"><sp/><ref refid="liblightnvm_8h_1af7a10ed9f4afdf308e43901a3cf3c1ae" kindref="member" tooltip="Print the virtual block in a humanly readable form.">nvm_vblk_pr</ref>(</highlight><highlight class="keyword">struct</highlight><highlight class="normal"><sp/><ref refid="structnvm__vblk" kindref="compound" tooltip="Virtual block abstraction.">nvm_vblk</ref><sp/>*vblk);</highlight></codeline>
<codeline lineno="1230"><highlight class="normal"></highlight></codeline>
<codeline lineno="1231"><highlight class="normal"></highlight><highlight class="preprocessor">#ifdef<sp/>__cplusplus</highlight></codeline>
<codeline lineno="1232"><highlight class="preprocessor"></highlight><highlight class="normal">}</highlight></codeline>
<codeline lineno="1233"><highlight class="normal"></highlight><highlight class="preprocessor">#endif</highlight></codeline>
<codeline lineno="1234"><highlight class="preprocessor"></highlight><highlight class="normal"></highlight></codeline>
<codeline lineno="1235"><highlight class="normal"></highlight><highlight class="preprocessor">#endif<sp/></highlight><highlight class="comment">/*<sp/>__LIBLIGHTNVM.H<sp/>*/</highlight><highlight class="normal"></highlight></codeline>
    </programlisting>
    <location file="/home/hkim/liblightnvm/include/liblightnvm.h"/>
  </compounddef>
</doxygen>
